{
  "swagger": "2.0",
  "info": {
    "version": "v2",
    "title": "JobAdder API",
    "description": "# Authentication\r\n\r\nJobAdder uses OAuth 2.0's authorization code grant flow to issue access tokens on behalf of users;\r\n\r\n\r\n### 1. Redirect to the JobAdder authorization URL.\r\n\r\nYour application should redirect the user to the authorization URL\r\n\r\n```\r\nhttps://id.jobadder.com/connect/authorize\r\n```\r\n\r\nThe following query parameters should be passed with the GET request:\r\n\r\n| parameter     | description |\r\n|---------------|-------------|\r\n| response_type | **code** (required) |\r\n| client_id     | issued when you created your application (required) |\r\n| scope         | permissions to request, see below (required) |\r\n| redirect_uri  | URL to redirect back to (required) | \r\n| state         | unique string to be passed back (optional) |\r\n\r\nThe **scope** parameter is a space-separated list of OAuth scopes indicating the desired access:\r\n\r\n| scope          | description |\r\n|----------------|-------------|\r\n| read           | Read/view JobAdder data |\r\n| write          | Modify/manage JobAdder data |\r\n| offline_access | Access JobAdder data for an extended period of time, must always be combined with other scopes |\r\n\r\nThe **redirect_uri** parameter must match one of the URLs specified when the client_id was issued.\r\n\r\nThe **state** parameter can be provided to carry through server-specific state. For example, you can use\r\nthis to help prevent forgery attacks.\r\n\r\nThe user will be presented with a login screen, and then a confirmation screen where they will grant your\r\napplication access to their JobAdder data.\r\n\r\n\r\n### 2. Receive an authorization code from JobAdder.\r\n\r\nAfter a successful login, the authorization server will redirect to the URL specified in step 1 passing \r\nthe following parameters passed with the GET request:\r\n\r\n| parameter     | description |\r\n|---------------|-------------|\r\n| code          | a temporary authorization code | \r\n| state         | the unique string specified in step 1 |\r\n\r\nIf you passed a **state** parameter in step 1 then at this point you should compare the state parameter\r\nfrom this request with the state parameter from the request in step 1. If the states don't match then\r\nthe request may have been created by an unknown third party and you should abort the process.\r\n\r\nIf your request for access is denied by the user then the user will be redirected to the URL specified in step 1\r\nwith the following query parameters passed with the GET request:\r\n\r\n| parameter     | value         |\r\n|---------------|---------------|\r\n| error         | access_denied | \r\n\r\n\r\n### 3. Exchange the authorization code for an access token.\r\n\r\nThe authorization code received in step 2 will remain valid for 5 minutes and should be exchanged for an \r\naccess token. To do this, submit a POST request to the token URL:\r\n\r\n```\r\nhttps://id.jobadder.com/connect/token\r\n```\r\n\r\nThe following  parameters should be included in the POST request:\r\n\r\n| parameter     | description |\r\n|---------------|-------------|\r\n| client_id     | issued when you created your application (required) |\r\n| client_secret | issued when you created your application (required) |\r\n| grant_type    | **authorization_code** (required) |\r\n| code          | the temporary authorization code received in step 2 (required) |\r\n| redirect_uri  | the URL specified in step 1 (required) |\r\n\r\nThis request will return a JSON response containing the access token, for example\r\n\r\n```json\r\n{\r\n  access_token: \"31ff7431b4c1dde02e386122702f5460\",\r\n  expires_in: 3600,\r\n  token_type: \"Bearer\",\r\n  refresh_token: \"e7672885d6da2db1e56d200dd292c801\",\r\n  api: \"https://api.jobadder.com/v2\"\r\n}\r\n```\r\n\r\n| parameter     | description |\r\n|---------------|-------------|\r\n| access_token  | token to be used as the Bearer token in the Authorization header of all API requests |\r\n| expires_in    | expiration time of the access token in seconds since the response was generated |\r\n| refresh_token | token to be used to request new access tokens |\r\n| api           | The base URL to use for API access |\r\n\r\n\r\n### 4. Refresh Tokens\r\n\r\nThe access token has a limited lifetime (currently 60 minutes). \r\nIf your application requested the **offline_access** scope (in step 1) then it is possible to gain \r\nextended access to the user's data by requesting a new access token using the refresh token.\r\nTo do this, submit a POST request to the token URL:\r\n\r\n```\r\nhttps://id.jobadder.com/connect/token\r\n```\r\n\r\nThe following  parameters should be included in the POST request:\r\n\r\n| parameter     | description |\r\n|---------------|-------------|\r\n| client_id     | issued when you created your application (required) |\r\n| client_secret | issued when you created your application (required) |\r\n| grant_type    | **refresh_token** (required)                        |\r\n| refresh_token | the refresh token returned in step 3                |\r\n\r\nThis request will return a JSON response containing a new access token and request token.\r\n```json\r\n{\r\n  access_token: \"d2534958b2d3b9e3b0e16c98f91f0184\",\r\n  expires_in: 3600,\r\n  token_type: \"Bearer\",\r\n  refresh_token: \"e1b495fa69c9bdacbc7e5dd535d4564f\",\r\n  api: \"https://api.jobadder.com/v2\"\r\n}\r\n```\r\n\r\n\r\n"
  },
  "host": "api.jobadder.com",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/jobboards": {
      "get": {
        "tags": [
          "Job Board API:Job Boards"
        ],
        "summary": "Find job boards",
        "operationId": "FindJobBoards",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "query",
            "description": "Job Board Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job boards matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobBoardListModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Boards",
        "x-apiOrder": 1
      }
    },
    "/jobboards/{boardId}": {
      "get": {
        "tags": [
          "Job Board API:Job Boards"
        ],
        "summary": "Get a job board",
        "operationId": "GetJobBoard",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job board details",
            "schema": {
              "$ref": "#/definitions/JobBoardModel"
            }
          },
          "404": {
            "description": "Requested job board was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Boards",
        "x-apiOrder": 1
      }
    },
    "/jobboards/{boardId}/ads": {
      "get": {
        "tags": [
          "Job Board API:Job Ads"
        ],
        "summary": "Find job ads",
        "operationId": "FindJobBoardJobAds",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reference",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portal.hotJob",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "portal.value",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portal.valueId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "portal.template",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "postedAt",
            "in": "query",
            "description": "Search for job ads posted at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for job ads updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "expiresAt",
            "in": "query",
            "description": "Search for job ads expiring at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: <code>description</code>, <code>portal.fields</code>",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobBoardJobAdListModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 2
      }
    },
    "/jobboards/{boardId}/ads/{adId}": {
      "get": {
        "tags": [
          "Job Board API:Job Ads"
        ],
        "summary": "Get a job ad",
        "operationId": "GetJobBoardJobAd",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job ad details",
            "schema": {
              "$ref": "#/definitions/JobBoardJobAdModel"
            }
          },
          "404": {
            "description": "Requested job ad was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 2
      }
    },
    "/jobboards/{boardId}/ads/{adId}/applications": {
      "post": {
        "tags": [
          "Job Board API:Job Applications"
        ],
        "summary": "Submit a job application",
        "operationId": "SubmitJobBoardJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "Job Board Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job application attachment links",
            "schema": {
              "$ref": "#/definitions/SubmittedJobApplicationModel"
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 3
      }
    },
    "/jobboards/{boardId}/ads/{adId}/applications/{applicationId}/{attachmentType}": {
      "post": {
        "tags": [
          "Job Board API:Job Applications"
        ],
        "summary": "Submit job application documents",
        "description": "Add a resume, cover letter or related document to a previously submitted job application.<br />\r\nDocuments can be added for a duration of 5 minutes after submitting the job application.",
        "operationId": "AttachJobBoardJobApplicationDocument",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "Job Board Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Resume",
              "FormattedResume",
              "CoverLetter",
              "Screening",
              "Check",
              "Reference",
              "License",
              "Other"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication",
              "partner_jobboard"
            ]
          }
        ],
        "x-apiName": "Job Board API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 3
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Find jobs",
        "operationId": "FindJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "Job Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobTitle",
            "in": "query",
            "description": "Job title",
            "required": false,
            "type": "string"
          },
          {
            "name": "company.companyId",
            "in": "query",
            "description": "Companies by Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "company.name",
            "in": "query",
            "description": "Company name",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Alias for company.companyId",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Job status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "active",
            "in": "query",
            "description": "Search for active/open jobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userFavourite",
            "in": "query",
            "description": "Search for the user's favourite jobs",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id - search for jobs by owner or associated recruiter",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ownerUserId",
            "in": "query",
            "description": "User Id - search for jobs by owner",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "recruiterUserId",
            "in": "query",
            "description": "User Id - search jobs by associated recruiters",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "User Id - search for jobs created by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for jobs created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for jobs last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for jobs updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "closedBy",
            "in": "query",
            "description": "User Id - search for jobs last closed by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "closedAt",
            "in": "query",
            "description": "Search for jobs closed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: jobTitle, status.name, createdAt, updatedAt, closedAt",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: recruiters, statistics, partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Add a job",
        "operationId": "AddJobOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobOrderCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/JobOrderRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Get a job",
        "operationId": "GetJobOrder",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job details",
            "schema": {
              "$ref": "#/definitions/JobOrderRepresentation"
            }
          },
          "404": {
            "description": "Requested job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Update a job",
        "operationId": "UpdateJobOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobOrderCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job was successfully updated"
          },
          "404": {
            "description": "Job was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 1
      }
    },
    "/jobs/{jobId}/applications": {
      "get": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Get job applications",
        "operationId": "GetJobOrderJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of applications for the specified job",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      },
      "post": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Add candidates to a job",
        "operationId": "AddJobOrderCandidates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobOrderCandidateCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          },
          "409": {
            "description": "Candidate already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobs/{jobId}/applications/active": {
      "get": {
        "tags": [
          "Job API:Job Applications"
        ],
        "summary": "Get active job applications",
        "operationId": "GetJobOrderActiveJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active applications for the specified job",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 10
      }
    },
    "/jobs/{jobId}/attachments": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindJobOrderAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "JobDescription"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobOrderAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a job attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetJobOrderAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "application/pdf",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested job attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateJobOrderAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobOrderAttachmentCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddJobOrderAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "JobDescription"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/submissions": {
      "get": {
        "tags": [
          "Job API:Submissions"
        ],
        "summary": "Get all submissions",
        "operationId": "GetJobOrderSubmissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions for the requested job",
            "schema": {
              "$ref": "#/definitions/SubmissionListRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 20
      }
    },
    "/jobs/{jobId}/placements": {
      "get": {
        "tags": [
          "Job API:Placements"
        ],
        "summary": "Get all placements",
        "operationId": "GetJobOrderPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified job",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 30
      }
    },
    "/jobs/{jobId}/placements/approved": {
      "get": {
        "tags": [
          "Job API:Placements"
        ],
        "summary": "Get approved placements",
        "operationId": "GetJobOrderApprovedPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified job",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 30
      }
    },
    "/jobs/{jobId}/status": {
      "put": {
        "tags": [
          "Job API:Jobs"
        ],
        "summary": "Set a job status",
        "description": "Change the job status and add an optional note",
        "operationId": "PutJobOrderStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetJobOrderStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job status was successfully updated"
          },
          "202": {
            "description": "Job status already assigned"
          },
          "404": {
            "description": "Job was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/jobs/{jobId}/notes": {
      "get": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Get all notes",
        "operationId": "GetJobOrderNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified job",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddJobOrderNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobOrderNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Job was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/jobs/fields/custom": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetJobOrderCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of job custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetJobOrderCustomFieldItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested job custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Job API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetJobOrderAttachmentCategoryList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "JobDescription"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job attachment categories",
            "schema": {
              "$ref": "#/definitions/JobOrderAttachmentCategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/notetype": {
      "get": {
        "tags": [
          "Job API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetJobOrderNoteTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of note type definitions",
            "schema": {
              "$ref": "#/definitions/NoteTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_job_note"
            ]
          }
        ],
        "x-apiName": "Job API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/source": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all job sources",
        "operationId": "GetJobOrderSourceList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job sources",
            "schema": {
              "$ref": "#/definitions/JobOrderSourceListRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/status": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetJobOrderStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job status definitions",
            "schema": {
              "$ref": "#/definitions/StatusListRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobs/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Job API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetJobOrderStatusItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job status definition",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          },
          "404": {
            "description": "Requested job status definition was not found",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          }
        },
        "x-apiName": "Job API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/requisitions": {
      "get": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Find requisitions",
        "operationId": "FindRequisitions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "query",
            "description": "Requistion Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Draft",
                "Submitted",
                "Rejected",
                "Approved"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "hiringManager.contactId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hiringManager.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "approver.contactId",
            "in": "query",
            "description": "Find requisitions by approver contact id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "approver.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "approver.pending",
            "in": "query",
            "description": "Find requisitions pending approval by contacts specified in approver.contactId",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id - search for requisitions by owner or associated recruiter",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ownerUserId",
            "in": "query",
            "description": "User Id - search for requisitions by owner",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "recruiterUserId",
            "in": "query",
            "description": "User Id - search for requisitions by associated recruiters",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for jobs created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for jobs updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: jobTitle, status, createdAt, updatedAt",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Linked resources to embed in the results",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of requisitions matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/RequisitionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Add a requisition",
        "operationId": "AddRequisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddRequisitionCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RequisitionRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      }
    },
    "/requisitions/{requisitionId}": {
      "get": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Get a requisition",
        "operationId": "GetRequisition",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition details",
            "schema": {
              "$ref": "#/definitions/RequisitionRepresentation"
            }
          },
          "404": {
            "description": "Requested requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Update a requisition",
        "operationId": "UpdateRequisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRequisitionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      },
      "delete": {
        "tags": [
          "Requisition API:Requisitions"
        ],
        "summary": "Remove a requisition",
        "operationId": "DeleteRequisition",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 1
      }
    },
    "/requisitions/{requisitionId}/attachments/{attachmentType}": {
      "get": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetLatestRequisitionAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "JobDescription"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requisition attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      },
      "post": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Add an attachment",
        "operationId": "AddRequisitionAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "JobDescription"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      },
      "delete": {
        "tags": [
          "Requisition API:Attachments"
        ],
        "summary": "Remove an attachment",
        "operationId": "DeleteRequisitionAttachment",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attachmentType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "JobDescription"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Requisition attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/requisitions/{requisitionId}/approve": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Approve a requisition",
        "operationId": "ApproveRequisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveRequisitionCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/history": {
      "get": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Get approval history",
        "operationId": "GetRequisitionApprovalHistory",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition approval history",
            "schema": {
              "$ref": "#/definitions/RequisitionHistoryModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/reject": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Reject a requisition",
        "operationId": "RejectRequisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RejectRequisitionCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/submit": {
      "put": {
        "tags": [
          "Requisition API:Approval"
        ],
        "summary": "Submit a requisition for approval",
        "operationId": "SubmitRequisition",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitRequisitionCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Approval",
        "x-apiOrder": 20
      }
    },
    "/requisitions/{requisitionId}/notes": {
      "get": {
        "tags": [
          "Requisition API:Notes"
        ],
        "summary": "Get requisition notes",
        "operationId": "GetRequisitionNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "description": "Requisition Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified requisition",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_requisition_note"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Requisition API:Notes"
        ],
        "summary": "Add a requisition note",
        "operationId": "AddRequisitionNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requisitionId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddRequisitionNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Requisition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_requisition_note"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/requisitions/fields/custom": {
      "get": {
        "tags": [
          "Requisition API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetRequisitionCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of requisition custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/requisitions/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Requisition API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetRequisitionCustomFieldItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested requisition custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested requisition custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Requisition API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/jobads": {
      "get": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Find job ads",
        "operationId": "GetJobAds",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobAdListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 100
      },
      "post": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Add a draft job ad",
        "operationId": "AddJobAdDraft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobAdDraftCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/JobAdRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 100
      }
    },
    "/jobads/{adId}": {
      "get": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Get a job ad",
        "operationId": "GetJobAd",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job ad details",
            "schema": {
              "$ref": "#/definitions/JobAdRepresentation"
            }
          },
          "404": {
            "description": "Requested job ad was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 100
      },
      "put": {
        "tags": [
          "Job Ad API:Job Ads"
        ],
        "summary": "Update a draft job ad",
        "operationId": "UpdateJobAdDraft",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "adId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobAdDraftCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Job Ad API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 100
      }
    },
    "/candidates": {
      "get": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Find candidates",
        "operationId": "FindCandidates",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "query",
            "description": "Candidate Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Candidate name",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Candidate email",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Candidate phone or mobile number",
            "required": false,
            "type": "string"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Search for key words within the latest candidate resume",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Candidate status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "recruiterUserId",
            "in": "query",
            "description": "User Id - search candidates by associated recruiters",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for candidates created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for candidates updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: firstName, lastName, status.name, createdAt, updatedAt",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: recruiters, statistics",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/CandidateListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Add a candidate",
        "operationId": "AddCandidate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCandidateCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CandidateRepresentation"
            }
          },
          "409": {
            "description": "Candidate with this email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      }
    },
    "/candidates/{candidateId}": {
      "get": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Get a candidate",
        "operationId": "GetCandidate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate details",
            "schema": {
              "$ref": "#/definitions/CandidateRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate was not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Update a candidate",
        "operationId": "UpdateCandidate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCandidateCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate was successfully updated"
          },
          "404": {
            "description": "Candidate was not found"
          },
          "409": {
            "description": "Candidate with this email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 1
      }
    },
    "/candidates/{candidateId}/photo": {
      "get": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Get a photo",
        "operationId": "GetCandidatePhoto",
        "consumes": [],
        "produces": [
          "image/jpeg",
          "image/gif",
          "image/png"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by h",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate photo",
            "schema": {
              "type": "file"
            },
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested candidate photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Update a photo",
        "operationId": "UpdateCandidatePhoto",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Remove a photo",
        "operationId": "DeleteCandidatePhoto",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      },
      "head": {
        "tags": [
          "Candidate API:Photo"
        ],
        "summary": "Get photo headers",
        "operationId": "HeadCandidatePhoto",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by h",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested candidate photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Photo",
        "x-apiOrder": 2
      }
    },
    "/candidates/{candidateId}/availability": {
      "get": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Get availability",
        "operationId": "GetCandidateAvailability",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Availability for the specified candidate",
            "schema": {
              "$ref": "#/definitions/CandidateAvailabilityListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      }
    },
    "/candidates/{candidateId}/availability/weekly": {
      "put": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Update weekly availability",
        "description": "Set the candidates availability schedule for a single week",
        "operationId": "UpdateCandidateAvailabilityWeek",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetCandidateAvailabilityByWeekCommand"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      },
      "delete": {
        "tags": [
          "Candidate API:Availability"
        ],
        "summary": "Remove weekly availability",
        "description": "Remove the candidates availability schedule for a single week",
        "operationId": "DeleteCandidateAvailabilityWeek",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekOf",
            "in": "query",
            "description": "Remove availability for the week (beginning Sunday) containing the specified date",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "recurring",
            "in": "query",
            "description": "Remove availability in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, all existing future overlapping schedules will be cancelled.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "until",
            "in": "query",
            "description": "Optional end date of repeating availability removal",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Availability",
        "x-apiOrder": 3
      }
    },
    "/candidates/{candidateId}/videos": {
      "get": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Get all videos",
        "operationId": "GetCandidateVideos",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate videos",
            "schema": {
              "$ref": "#/definitions/CandidateVideoListRepresentation"
            }
          }
        },
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/candidates/{candidateId}/videos/{videoType}": {
      "get": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Get a recent video",
        "operationId": "GetLatestCandidateVideo",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "videoType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Profile",
              "CoverLetter"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate video",
            "schema": {
              "$ref": "#/definitions/CandidateVideoRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate video was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      },
      "post": {
        "tags": [
          "Candidate API:Videos"
        ],
        "summary": "Add a video",
        "operationId": "AddCandidateVideo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "videoType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Profile",
              "CoverLetter"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCandidateVideoCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CandidateVideoModel"
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/candidates/{candidateId}/skills": {
      "get": {
        "tags": [
          "Candidate API:Skills"
        ],
        "summary": "Get skills",
        "operationId": "GetCandidateSkills",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified candidate",
            "schema": {
              "$ref": "#/definitions/CategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 10
      }
    },
    "/candidates/{candidateId}/attachments": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindCandidateAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Resume",
                "CoverLetter",
                "FormattedResume",
                "Screening",
                "Check",
                "Reference",
                "License"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search by attachment category",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/CandidateAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/candidates/{candidateId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a candidate attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetCandidateAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "application/pdf",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested candidate attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateCandidateAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCandidateAttachmentCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CandidateAttachmentRepresentation"
            }
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddCandidateAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Type of attachment being added",
            "required": true,
            "type": "string",
            "enum": [
              "Resume",
              "FormattedResume",
              "CoverLetter",
              "Screening",
              "Check",
              "Reference",
              "License",
              "Other"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CandidateAttachmentRepresentation"
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/candidates/{candidateId}/floats": {
      "get": {
        "tags": [
          "Candidate API:Floats"
        ],
        "summary": "Get all floats",
        "operationId": "GetCandidateFloats",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of floats for the specified candidate",
            "schema": {
              "$ref": "#/definitions/FloatListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 50
      }
    },
    "/candidates/{candidateId}/applications": {
      "get": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Get job applications",
        "description": "This will include both active and complete/closed job applications",
        "operationId": "GetCandidateJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications for the specified candidate",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      },
      "post": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Add jobs to a candidate",
        "operationId": "AddCandidateJobOrders",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCandidateJobOrderCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          },
          "409": {
            "description": "Job application already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/candidates/{candidateId}/applications/active": {
      "get": {
        "tags": [
          "Candidate API:Job Applications"
        ],
        "summary": "Get active job applications",
        "operationId": "GetActiveCandidateJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />Setting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active job applications for the specified candidate",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/candidates/{candidateId}/submissions": {
      "get": {
        "tags": [
          "Candidate API:Submissions"
        ],
        "summary": "Get all submissions",
        "operationId": "GetCandidateSubmissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of submissions for the specified candidate",
            "schema": {
              "$ref": "#/definitions/SubmissionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 52
      }
    },
    "/candidates/{candidateId}/placements": {
      "get": {
        "tags": [
          "Candidate API:Placements"
        ],
        "summary": "Get all placements",
        "operationId": "GetCandidatePlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified candidate",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 55
      }
    },
    "/candidates/{candidateId}/placements/approved": {
      "get": {
        "tags": [
          "Candidate API:Placements"
        ],
        "summary": "Get all approved placements",
        "operationId": "GetCandidateApprovedPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified candidate",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 55
      }
    },
    "/candidates/{candidateId}/status": {
      "put": {
        "tags": [
          "Candidate API:Candidates"
        ],
        "summary": "Set a candidate status",
        "description": "Change the candidate status and add an optional note",
        "operationId": "PutCandidateStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetCandidateStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate status was successfully updated"
          },
          "202": {
            "description": "Candidate status already assigned"
          },
          "404": {
            "description": "Candidate was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 60
      }
    },
    "/candidates/{candidateId}/notes": {
      "get": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Get all notes",
        "operationId": "GetCandidateNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Include related notes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "JobApplication",
                "Placement"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified candidate",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddCandidateNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCandidateNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/candidates/{candidateId}/privacy": {
      "delete": {
        "tags": [
          "Candidate API:Privacy"
        ],
        "summary": "Remove a candidate at their request",
        "operationId": "PrivacyDeleteCandidate",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Candidate was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Privacy",
        "x-apiOrder": 99
      }
    },
    "/candidates/fields/custom": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all candidate custom field definitions",
        "operationId": "GetCandidateCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of candidate custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get a custom field definition",
        "operationId": "GetCandidateCustomFieldListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Candidate API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetCandidateAttachmentCategoryList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Resume",
                "CoverLetter",
                "FormattedResume",
                "Screening",
                "Check",
                "Reference",
                "License"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate attachment categories",
            "schema": {
              "$ref": "#/definitions/CandidateAttachmentCategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/notetype": {
      "get": {
        "tags": [
          "Candidate API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetCandidateNoteTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate note type definitions",
            "schema": {
              "$ref": "#/definitions/NoteTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/rating": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get internal ratings",
        "operationId": "GetCandidateRatingList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate internal ratings",
            "schema": {
              "$ref": "#/definitions/CandidateRatingListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/salutation": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get salutations (honorifics/titles)",
        "operationId": "GetCandidateSalutationList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate salutations",
            "schema": {
              "$ref": "#/definitions/SalutationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/source": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all candidate sources",
        "operationId": "GetCandidateSourceList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate sources",
            "schema": {
              "$ref": "#/definitions/CandidateSourceListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/status": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetCandidateStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate status definitions",
            "schema": {
              "$ref": "#/definitions/StatusListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/candidates/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Candidate API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetCandidateStatusListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate status definition",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate status definition was not found"
          }
        },
        "x-apiName": "Candidate API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/floats": {
      "get": {
        "tags": [
          "Candidate Float API:Floats"
        ],
        "summary": "Find floats",
        "operationId": "GetFloats",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "floatId",
            "in": "query",
            "description": "Float Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidateId",
            "in": "query",
            "description": "Candidate Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for floats created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for floats updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate floats matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/FloatListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate Float API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 100
      }
    },
    "/floats/{floatId}": {
      "get": {
        "tags": [
          "Candidate Float API:Floats"
        ],
        "summary": "Get a float",
        "operationId": "GetFloat",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "floatId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate float details",
            "schema": {
              "$ref": "#/definitions/FloatRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate float was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Candidate Float API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 100
      }
    },
    "/submissions": {
      "get": {
        "tags": [
          "Candidate Submission API:Submissions"
        ],
        "summary": "Find submissions",
        "operationId": "FindSubmissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submissionId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidateId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for submissions created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for submissions updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/SubmissionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate Submission API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 100
      }
    },
    "/submissions/{submissionId}": {
      "get": {
        "tags": [
          "Candidate Submission API:Submissions"
        ],
        "summary": "Get a submission",
        "operationId": "GetSubmission",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submissionId",
            "in": "path",
            "description": "Submission Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested candidate submission details",
            "schema": {
              "$ref": "#/definitions/SubmissionRepresentation"
            }
          },
          "404": {
            "description": "Requested candidate submission was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Candidate Submission API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 100
      }
    },
    "/applications": {
      "get": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Find job applications",
        "operationId": "FindJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "query",
            "description": "Application Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidateId",
            "in": "query",
            "description": "Candidate Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Job Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Job application status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "description": "Search for active job applications",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "rejected",
            "in": "query",
            "description": "Search for rejected job applications",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "review.stage",
            "in": "query",
            "description": "Search for job applications at the specified review stage.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "Viewed",
                "Accepted",
                "Rejected"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "review.userId",
            "in": "query",
            "description": "Search for job applications submitted for review by the specified users.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "review.contactId",
            "in": "query",
            "description": "Search for job applications submitted for review to the specified hiring manager contacts",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "review.submittedAt",
            "in": "query",
            "description": "Search for job applications submitted for review at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "review.reviewedAt",
            "in": "query",
            "description": "Search for job applications reviewed at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Search for key words within the applicant's resume",
            "required": false,
            "type": "string"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for job applications created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for job applications last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for job applications updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: createdAt, status.name, review.stage, review.submittedAt, review.reviewedAt",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      }
    },
    "/applications/{applicationId}": {
      "get": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Get a job application",
        "operationId": "GetJobApplication",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application details",
            "schema": {
              "$ref": "#/definitions/JobApplicationRepresentation"
            }
          },
          "404": {
            "description": "Requested job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Update a job application",
        "description": "Update job application status and custom fields",
        "operationId": "UpdateJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job application was successfully updated"
          },
          "404": {
            "description": "Job application was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 1
      }
    },
    "/applications/{applicationId}/videos": {
      "get": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Get all videos",
        "operationId": "GetJobApplicationVideos",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application videos",
            "schema": {
              "$ref": "#/definitions/CandidateVideoListRepresentation"
            }
          }
        },
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/applications/{applicationId}/videos/{videoType}": {
      "get": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Get a recent video",
        "operationId": "GetLatestJobApplicationVideo",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "videoType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Profile",
              "CoverLetter"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application video",
            "schema": {
              "$ref": "#/definitions/CandidateVideoRepresentation"
            }
          },
          "404": {
            "description": "Requested job application video was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      },
      "post": {
        "tags": [
          "Job Application API:Videos"
        ],
        "summary": "Add a video",
        "operationId": "AddJobApplicationVideo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "videoType",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Profile",
              "CoverLetter"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobApplicationVideoCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CandidateVideoModel"
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Videos",
        "x-apiOrder": 5
      }
    },
    "/applications/{applicationId}/attachments": {
      "get": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindJobApplicationAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Resume",
                "CoverLetter",
                "FormattedResume",
                "Screening",
                "Check",
                "Reference",
                "License"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search by attachment label",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/CandidateAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/applications/{applicationId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a job application attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetJobApplicationAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream",
          "application/pdf",
          "text/html",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested job application attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateJobApplicationAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobApplicationAttachmentCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Job Application API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddJobApplicationAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Resume",
              "FormattedResume",
              "CoverLetter",
              "Screening",
              "Check",
              "Reference",
              "License",
              "Other"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/applications/{applicationId}/review": {
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Mark a job application as viewed by the hiring manager",
        "operationId": "ReviewViewJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewViewJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      },
      "post": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Submit a job application for review",
        "operationId": "ReviewSubmitJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewSubmitJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/review/accept": {
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Accept a job application",
        "operationId": "ReviewAcceptJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewAcceptJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/review/reject": {
      "put": {
        "tags": [
          "Job Application API:Review"
        ],
        "summary": "Reject a job application",
        "operationId": "ReviewRejectJobApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReviewRejectJobApplicationCommand"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Review",
        "x-apiOrder": 30
      }
    },
    "/applications/{applicationId}/status": {
      "put": {
        "tags": [
          "Job Application API:Job Applications"
        ],
        "summary": "Set a job application status",
        "description": "Change the job application status and add an optional note",
        "operationId": "PutJobApplicationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetJobApplicationStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job application status was successfully updated"
          },
          "202": {
            "description": "Job application status already assigned"
          },
          "404": {
            "description": "Job application was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 60
      }
    },
    "/applications/{applicationId}/notes": {
      "get": {
        "tags": [
          "Job Application API:Notes"
        ],
        "summary": "Get all notes",
        "operationId": "GetJobApplicationNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified job application",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_jobapplication_note"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Job Application API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddJobApplicationNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddJobApplicationNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Job application was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_jobapplication_note"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/applications/fields/custom": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetJobApplicationCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of job application custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get a custom field",
        "operationId": "GetJobApplicationCustomFieldListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested job application custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/status": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetJobApplicationStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "rejected",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of job application status definitions",
            "schema": {
              "$ref": "#/definitions/JobApplicationStatusListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetJobApplicationStatusListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested job application status definition",
            "schema": {
              "$ref": "#/definitions/JobApplicationStatusRepresentation"
            }
          },
          "404": {
            "description": "Requested job application status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/applications/lists/workflow": {
      "get": {
        "tags": [
          "Job Application API:Lists"
        ],
        "summary": "Get the job application workflow",
        "operationId": "GetJobApplicationWorkflowList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Job application workflow",
            "schema": {
              "$ref": "#/definitions/JobApplicationStatusByWorkflowListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Job Application API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Find placements",
        "operationId": "FindPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "query",
            "description": "Placement Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Placement Type",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Permanent",
                "Contract",
                "Temporary",
                "Credit"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Placement status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidate.candidateId",
            "in": "query",
            "description": "Candidate Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidate.name",
            "in": "query",
            "description": "Candidate name",
            "required": false,
            "type": "string"
          },
          {
            "name": "candidateId",
            "in": "query",
            "description": "Alias for candidate.candidateId",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "company.companyId",
            "in": "query",
            "description": "Companies by Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "company.name",
            "in": "query",
            "description": "Company name",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Alias for company.companyId",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Job Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "applicationId",
            "in": "query",
            "description": "Job Application Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "User Id - search for placements by owner or associated recruiter",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "ownerUserId",
            "in": "query",
            "description": "User Id - search for placements by owner",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "recruiterUserId",
            "in": "query",
            "description": "User Id - search placements by associated recruiters",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "User Id - search for placements created by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for placements created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for placements last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for placements updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "approved",
            "in": "query",
            "description": "Search for approved placements",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "approvedBy",
            "in": "query",
            "description": "User Id - search for placements approved by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "approvedAt",
            "in": "query",
            "description": "Search for placements approved at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "description": "Search for placements that have been flagged by the user for export to integration partners.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Payroll",
                "Timesheets",
                "Onboarding"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "timesheet.period",
            "in": "query",
            "description": "Find placements with timesheets in the specified date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      }
    },
    "/placements/{placementId}": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get a placement",
        "operationId": "GetPlacement",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement details",
            "schema": {
              "$ref": "#/definitions/PlacementRepresentation"
            }
          },
          "404": {
            "description": "Requested placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Update a placement",
        "operationId": "UpdatePlacement",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlacementCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Placement was successfully updated"
          },
          "404": {
            "description": "Placement was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 1
      }
    },
    "/placements/{placementId}/attachments": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindPlacementAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Resume",
                "FormattedResume",
                "CoverLetter",
                "Screening",
                "Check",
                "Reference",
                "License",
                "Terms",
                "CompanyTerms",
                "StandardTerms"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/PlacementAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/placements/{placementId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Get an attachment",
        "description": "Get a placement attachment.<br />Setting the Accept header will attempt a file conversion.",
        "operationId": "GetPlacementAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested placement attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdatePlacementAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlacementAttachmentCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddPlacementAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Resume",
              "FormattedResume",
              "CoverLetter",
              "Screening",
              "Check",
              "Reference",
              "License",
              "Terms",
              "CompanyTerms",
              "StandardTerms"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/placements/{placementId}/status": {
      "put": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Set a placement status",
        "description": "Change the placement status and add an optional note",
        "operationId": "PutPlacementStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPlacementStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Placement status was successfully updated"
          },
          "202": {
            "description": "Placement status already assigned"
          },
          "404": {
            "description": "Placement was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 60
      }
    },
    "/placements/{placementId}/timesheets": {
      "get": {
        "tags": [
          "Placement API:Timesheets"
        ],
        "summary": "Get timesheets",
        "operationId": "GetPlacementTimesheets",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "period",
            "in": "query",
            "description": "Get timesheets for a specific date range\r\n([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with &lt; or &gt; to search dates before or after (inclusive) the specified date.\r\nSpecify multiple parameters to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of timesheets for the specified placement",
            "schema": {
              "$ref": "#/definitions/PlacementTimesheetListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Timesheets",
        "x-apiOrder": 80
      }
    },
    "/placements/{placementId}/notes": {
      "get": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Get all notes",
        "operationId": "GetPlacementNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified placement",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddPlacementNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "placementId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPlacementNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Placement was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/placements/fields/custom": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get all custom fields",
        "operationId": "GetPlacementCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of placement custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Placement API:Placements"
        ],
        "summary": "Get a custom field",
        "operationId": "GetPlacementCustomFieldItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested placement custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Placement API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetPlacementAttachmentCategoryList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Resume",
                "FormattedResume",
                "CoverLetter",
                "Screening",
                "Check",
                "Reference",
                "License",
                "Terms",
                "CompanyTerms",
                "StandardTerms"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement attachment categories",
            "schema": {
              "$ref": "#/definitions/PlacementAttachmentCategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/awards": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all awards",
        "operationId": "GetPlacementAwardList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement award definitions",
            "schema": {
              "$ref": "#/definitions/PlacementAwardListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/billingterms": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all billing terms",
        "operationId": "GetPlacementBillingTermsList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement billing terms definitions",
            "schema": {
              "$ref": "#/definitions/PlacementBillingTermsListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/industrycodes": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all industry codes",
        "operationId": "GetPlacementIndustryCodeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement industry code definitions",
            "schema": {
              "$ref": "#/definitions/PlacementIndustryCodeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/notetype": {
      "get": {
        "tags": [
          "Placement API:Notes"
        ],
        "summary": "Get all note types",
        "operationId": "GetPlacementNoteTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement note type definitions",
            "schema": {
              "$ref": "#/definitions/NoteTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_placement_note"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/paymenttypes": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all payment types",
        "operationId": "GetPlacementPaymentTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement payment type definitions",
            "schema": {
              "$ref": "#/definitions/PlacementPaymentTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/status": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get all status definitions",
        "operationId": "GetPlacementStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placement status definitions",
            "schema": {
              "$ref": "#/definitions/StatusListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/placements/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Placement API:Lists"
        ],
        "summary": "Get a status definition",
        "operationId": "GetPlacementStatusItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested placement status definition",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          },
          "404": {
            "description": "Requested placement status definition was *not found*"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Placement API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Find companies",
        "operationId": "FindCompanies",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Company name",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Companies by Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "Find subsidiaries of specified parent companies",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "subsidiaryId",
            "in": "query",
            "description": "Find parents of specified subsidiaries",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "Company status",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "User Id - search for companies created by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for companies created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for companies last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for companies updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of companies matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/CompanyListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Add a new company",
        "operationId": "AddCompany",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCompanyCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CompanyRepresentation"
            }
          },
          "409": {
            "description": "Company with this name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      }
    },
    "/companies/{companyId}": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Get a company",
        "operationId": "GetCompany",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company details",
            "schema": {
              "$ref": "#/definitions/CompanyRepresentation"
            }
          },
          "404": {
            "description": "Requested company was not found",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Update an existing company",
        "operationId": "UpdateCompany",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Company was successfully updated"
          },
          "404": {
            "description": "Requested company was not found"
          },
          "409": {
            "description": "Company with this name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 1
      }
    },
    "/companies/{companyId}/logo": {
      "get": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Get a company logo",
        "operationId": "GetCompanyLogo",
        "consumes": [],
        "produces": [
          "image/jpeg",
          "image/gif",
          "image/png"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the logo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the logo to fit the height specified by h",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company logo",
            "schema": {
              "type": "file"
            },
            "headers": {
              "ETag": {
                "description": "Logo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested company logo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Add or update a company logo",
        "operationId": "UpdateCompanyLogo",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Remove a company logo",
        "operationId": "DeleteCompanyLogo",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      },
      "head": {
        "tags": [
          "Company API:Logo"
        ],
        "summary": "Get company logo headers",
        "operationId": "HeadCompanyLogo",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the logo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the logo to fit the height specified by h",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Logo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested company logo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Logo",
        "x-apiOrder": 2
      }
    },
    "/companies/{companyId}/addresses": {
      "get": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Get all addresses",
        "operationId": "GetCompanyAddresses",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of addresses for the specified company",
            "schema": {
              "$ref": "#/definitions/CompanyAddressListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "post": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Add an address",
        "operationId": "AddCompanyAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCompanyAddressCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CompanyAddressRepresentation"
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      }
    },
    "/companies/{companyId}/addresses/{addressId}": {
      "get": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Get an address",
        "operationId": "GetCompanyAddress",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company address",
            "schema": {
              "$ref": "#/definitions/CompanyAddressRepresentation"
            }
          },
          "404": {
            "description": "Requested company address was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "put": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Update an address",
        "operationId": "UpdateCompanyAddress",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyAddressCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company address not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      },
      "delete": {
        "tags": [
          "Company API:Addresses"
        ],
        "summary": "Remove an address",
        "operationId": "RemoveCompanyAddress",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Company address not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Addresses",
        "x-apiOrder": 3
      }
    },
    "/companies/{companyId}/skills": {
      "get": {
        "tags": [
          "Company API:Skills"
        ],
        "summary": "Get company skills",
        "operationId": "GetCompanySkills",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified company",
            "schema": {
              "$ref": "#/definitions/CategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      }
    },
    "/companies/{companyId}/subsidiaries": {
      "get": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Get all subsidiaries for a company",
        "operationId": "GetCompanySubsidiaries",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subsidiaries for the specified company",
            "schema": {
              "$ref": "#/definitions/CompanyListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 10
      }
    },
    "/companies/{companyId}/contacts": {
      "get": {
        "tags": [
          "Company API:Contacts"
        ],
        "summary": "Get company contacts",
        "operationId": "GetCompanyContacts",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts for the specified company",
            "schema": {
              "$ref": "#/definitions/ContactListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 11
      }
    },
    "/companies/{companyId}/attachments": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindCompanyAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Terms"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of company attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/CompanyAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/companies/{companyId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetCompanyAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested company attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateCompanyAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyAttachmentCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddCompanyAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Terms"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/companies/{companyId}/jobs": {
      "get": {
        "tags": [
          "Company API:Jobs"
        ],
        "summary": "Get all jobs for a company",
        "operationId": "GetCompanyJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs for a company",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/jobs/active": {
      "get": {
        "tags": [
          "Company API:Jobs"
        ],
        "summary": "Get all active/open jobs for a company",
        "operationId": "GetCompanyActiveJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active jobs for a company",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/status": {
      "put": {
        "tags": [
          "Company API:Companies"
        ],
        "summary": "Set a company status",
        "description": "Change the company status and add an optional note",
        "operationId": "PutCompanyStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetCompanyStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company status was successfully updated"
          },
          "202": {
            "description": "Company status already assigned"
          },
          "404": {
            "description": "Company was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 60
      }
    },
    "/companies/{companyId}/requisitions": {
      "get": {
        "tags": [
          "Company API:Requisitions"
        ],
        "summary": "Get all requisitions for a company",
        "operationId": "GetCompanyRequisitions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of requisitions for the specified company",
            "schema": {
              "$ref": "#/definitions/RequisitionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_requisition"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Requisitions",
        "x-apiOrder": 61
      }
    },
    "/companies/{companyId}/floats": {
      "get": {
        "tags": [
          "Company API:Floats"
        ],
        "summary": "Get all floats for a company",
        "operationId": "GetCompanyFloats",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates floats for a company",
            "schema": {
              "$ref": "#/definitions/FloatListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_float"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Floats",
        "x-apiOrder": 70
      }
    },
    "/companies/{companyId}/submissions": {
      "get": {
        "tags": [
          "Company API:Submissions"
        ],
        "summary": "Get all candidate submissions for a company",
        "operationId": "GetCompanySubmissions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidate submissions for the requested company",
            "schema": {
              "$ref": "#/definitions/SubmissionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_submission"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Submissions",
        "x-apiOrder": 71
      }
    },
    "/companies/{companyId}/placements": {
      "get": {
        "tags": [
          "Company API:Placements"
        ],
        "summary": "Get all approved and unapproved placements for a company",
        "operationId": "GetCompanyPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements for the specified company",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 75
      }
    },
    "/companies/{companyId}/placements/approved": {
      "get": {
        "tags": [
          "Company API:Placements"
        ],
        "summary": "Get all approved placements for a company",
        "operationId": "GetCompanyApprovedPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of approved placements for the specified company",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 75
      }
    },
    "/companies/{companyId}/workflows/{workflowType}": {
      "get": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Get all company workflows",
        "operationId": "ListCompanyWorkflows",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "type": "string",
            "enum": [
              "Requisition"
            ]
          },
          {
            "name": "embed",
            "in": "query",
            "description": "Additional fields to include with the results",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of company workflows",
            "schema": {
              "$ref": "#/definitions/CompanyWorkflowListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      },
      "post": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Add a company workflow",
        "operationId": "AddCompanyWorkflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "type": "string",
            "enum": [
              "Requisition"
            ]
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCompanyWorkflowCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Add a company workflow",
            "schema": {
              "$ref": "#/definitions/CompanyWorkflowRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      }
    },
    "/companies/{companyId}/workflows/{workflowType}/{workflowId}": {
      "get": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Get a company workflow and approvers",
        "operationId": "GetCompanyWorkflow",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "type": "string",
            "enum": [
              "Requisition"
            ]
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a company workflow",
            "schema": {
              "$ref": "#/definitions/CompanyWorkflowRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      },
      "put": {
        "tags": [
          "Company API:Workflows"
        ],
        "summary": "Update a company workflow",
        "operationId": "UpdateCompanyWorkflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workflowType",
            "in": "path",
            "description": "Valid values: \"Requisition\"",
            "required": true,
            "type": "string",
            "enum": [
              "Requisition"
            ]
          },
          {
            "name": "workflowId",
            "in": "path",
            "description": "Workflow Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyWorkflowCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated a company workflow",
            "schema": {
              "$ref": "#/definitions/CompanyWorkflowRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Workflows",
        "x-apiOrder": 85
      }
    },
    "/companies/{companyId}/notes": {
      "get": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Get all notes for a company",
        "operationId": "GetCompanyNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified company",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_company_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Add a company note",
        "operationId": "AddCompanyNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddCompanyNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Company was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_company_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/companies/fields/custom": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get the list of company custom fields",
        "operationId": "GetCompanyCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of company custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a company custom field",
        "operationId": "GetCompanyCustomFieldListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested company custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Company API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetCompanyAttachmentCategoryList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Terms"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of company attachment categories",
            "schema": {
              "$ref": "#/definitions/CompanyAttachmentCategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/notetype": {
      "get": {
        "tags": [
          "Company API:Notes"
        ],
        "summary": "Get a list of company note types",
        "operationId": "GetCompanyNoteTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of company note types",
            "schema": {
              "$ref": "#/definitions/NoteTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_candidate_note"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/status": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a list of company status definitions",
        "operationId": "GetCompanyStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of company status definitions",
            "schema": {
              "$ref": "#/definitions/StatusListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/companies/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Company API:Lists"
        ],
        "summary": "Get a company status",
        "operationId": "GetCompanyStatusListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested company status definition",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          },
          "404": {
            "description": "Requested company status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Company API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Find contacts",
        "operationId": "FindContacts",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Contact name",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Contact email",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Contact phone or mobile number",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hiringManager",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "partnerAction.stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "partnerAction.submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "User Id - search for contacts created by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for contacts created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for contacts last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for contacts updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.\r\nFields available to include are: partnerActions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/ContactListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Add a new contact",
        "operationId": "AddContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddContactCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContactRepresentation"
            }
          },
          "409": {
            "description": "Contact with this email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      }
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact",
        "operationId": "GetContact",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact details",
            "schema": {
              "$ref": "#/definitions/ContactRepresentation"
            }
          },
          "404": {
            "description": "Requested contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Update an existing contact",
        "operationId": "UpdateContact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactCommand"
            }
          },
          {
            "name": "X-Allow-Duplicates",
            "in": "header",
            "description": "Duplicate override code from the header of an earlier 409 response",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact was successfully updated"
          },
          "404": {
            "description": "Requested contact was not found"
          },
          "409": {
            "description": "Contact with this email already exists",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            },
            "headers": {
              "X-Allow-Duplicates": {
                "description": "Duplicate override code to allow a duplicate resource",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 1
      }
    },
    "/contacts/{contactId}/photo": {
      "get": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact photo",
        "operationId": "GetContactPhoto",
        "consumes": [],
        "produces": [
          "image/jpeg",
          "image/gif",
          "image/png"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by g",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact photo",
            "schema": {
              "type": "file"
            },
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested contact photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Update a contact photo",
        "operationId": "UpdateContactPhoto",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "delete": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Remove photo",
        "operationId": "DeleteContactPhoto",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      },
      "head": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Get a contact photo headers",
        "operationId": "HeadContactPhoto",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "w",
            "in": "query",
            "description": "Reduce the size of the photo to fit the width specified by w",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "h",
            "in": "query",
            "description": "Reduce the size of the photo to fit the height specified by g",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "Photo version, can be used for cache validation",
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Requested contact photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 2
      }
    },
    "/contacts/{contactId}/skills": {
      "get": {
        "tags": [
          "Contact API:Skills"
        ],
        "summary": "Get contact skills",
        "operationId": "GetContactSkills",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills for the specified contact",
            "schema": {
              "$ref": "#/definitions/CategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Skills",
        "x-apiOrder": 5
      }
    },
    "/contacts/{contactId}/attachments": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Find attachments",
        "operationId": "FindContactAttachments",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Attachment types to include",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Terms"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "latest",
            "in": "query",
            "description": "Find the latest version of each attachment type",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact attachments matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/ContactAttachmentListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/contacts/{contactId}/attachments/{attach}": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Get an attachment",
        "operationId": "GetContactAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested contact attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "put": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Update attachment details",
        "operationId": "UpdateContactAttachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactAttachmentCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Attachment was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      },
      "post": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Add a single attachment",
        "operationId": "AddContactAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "attach",
            "in": "path",
            "description": "",
            "required": true,
            "type": "string",
            "enum": [
              "Other",
              "Terms"
            ]
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 20
      }
    },
    "/contacts/{contactId}/status": {
      "put": {
        "tags": [
          "Contact API:Contacts"
        ],
        "summary": "Set a contact status",
        "description": "Change the contact status and add an optional note",
        "operationId": "PutContactStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetContactStatusCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact status was successfully updated"
          },
          "202": {
            "description": "Contact status already assigned"
          },
          "404": {
            "description": "Contact was not found"
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 60
      }
    },
    "/contacts/{contactId}/notes": {
      "get": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Get all notes for a contact",
        "operationId": "GetContactNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes for the specified contact",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      },
      "post": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Add a contact note",
        "operationId": "AddContactNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddContactNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          },
          "404": {
            "description": "Contact was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note",
              "write_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 90
      }
    },
    "/contacts/{contactId}/jobs": {
      "get": {
        "tags": [
          "Contact API:Jobs"
        ],
        "summary": "Get all jobs for a contact",
        "operationId": "GetContactJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs for the specified contact",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 100
      }
    },
    "/contacts/{contactId}/jobs/active": {
      "get": {
        "tags": [
          "Contact API:Jobs"
        ],
        "summary": "Get all active/open jobs for a contact",
        "operationId": "GetContactActiveJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active/open jobs for the specified contact",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 100
      }
    },
    "/contacts/fields/custom": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get the list of Contact custom fields",
        "operationId": "GetContactCustomFieldList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of contact custom field definitions",
            "schema": {
              "$ref": "#/definitions/CustomFieldListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/fields/custom/{fieldId}": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a Contact custom field",
        "operationId": "GetContactCustomFieldListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact custom field definition",
            "schema": {
              "$ref": "#/definitions/CustomFieldRepresentation"
            }
          },
          "404": {
            "description": "Requested contact custom field definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/attachmentcategory": {
      "get": {
        "tags": [
          "Contact API:Attachments"
        ],
        "summary": "Get all attachment categories",
        "operationId": "GetContactAttachmentCategoryList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Other",
                "Terms"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact attachment categories",
            "schema": {
              "$ref": "#/definitions/ContactAttachmentCategoryListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/notetype": {
      "get": {
        "tags": [
          "Contact API:Notes"
        ],
        "summary": "Get a list of contact note types",
        "operationId": "GetContactNoteTypeList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact note type definitions",
            "schema": {
              "$ref": "#/definitions/NoteTypeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note",
              "read_contact_note"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/salutation": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get salutations (honorifics/titles)",
        "operationId": "GetContactSalutationList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact salutations",
            "schema": {
              "$ref": "#/definitions/SalutationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/status": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a list of contact status definitions",
        "operationId": "GetContactStatusList",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "default",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of contact status definitions",
            "schema": {
              "$ref": "#/definitions/StatusListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/contacts/lists/status/{statusId}": {
      "get": {
        "tags": [
          "Contact API:Lists"
        ],
        "summary": "Get a contact status definition",
        "operationId": "GetContactStatusListItem",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested contact status definition",
            "schema": {
              "$ref": "#/definitions/StatusRepresentation"
            }
          },
          "404": {
            "description": "Requested contact status definition was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Contact API",
        "x-apiGroup": "Lists",
        "x-apiOrder": 100
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Find notes",
        "operationId": "FindNotes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noteId",
            "in": "query",
            "description": "Note Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Note type",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Reference string used to identify a note or group of notes",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for notes created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for notes updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "candidateId",
            "in": "query",
            "description": "Candidate Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "companyId",
            "in": "query",
            "description": "Company Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "contactId",
            "in": "query",
            "description": "Contact Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "Job Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "requisitionId",
            "in": "query",
            "description": "Requisition Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "applicationId",
            "in": "query",
            "description": "Job Application Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "placementId",
            "in": "query",
            "description": "Placement Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "submissionId",
            "in": "query",
            "description": "Submission Id",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the results by one or multiple fields, prefix with \"-\" to sort descending.<br />\r\nFields available for sorting are: type, createdAt, updatedAt",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Additional fields to include with the results.<br />\r\nFields available to include are: text",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of notes matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/NoteListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Add a note",
        "operationId": "AddNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddNoteCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/NoteModel"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      }
    },
    "/notes/{noteId}": {
      "get": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Get a note",
        "operationId": "GetNote",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested note details",
            "schema": {
              "$ref": "#/definitions/NoteRepresentation"
            }
          },
          "404": {
            "description": "Requested note was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Note API:Notes"
        ],
        "summary": "Update a note",
        "operationId": "UpdateNote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNoteCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Specified note was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_note"
            ]
          }
        ],
        "x-apiName": "Note API",
        "x-apiGroup": "Notes",
        "x-apiOrder": 1
      }
    },
    "/notes/{noteId}/attachments": {
      "post": {
        "tags": [
          "Note API:Attachments"
        ],
        "summary": "Add a single attachment",
        "description": "The file can be submitted either as multipart/form-data with a single part containing only the file, or as binary data",
        "operationId": "AddNoteAttachment",
        "consumes": [
          "multipart/form-data",
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "fileData",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "Note was not found"
          }
        },
        "x-apiName": "Note API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/notes/{noteId}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Note API:Attachments"
        ],
        "summary": "Get a note attachment",
        "operationId": "GetNoteAttachment",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "Note Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested note attachment",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested note attachment was not found"
          }
        },
        "x-apiName": "Note API",
        "x-apiGroup": "Attachments",
        "x-apiOrder": 10
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Find users",
        "operationId": "FindUsers",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "officeId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Inactive",
                "Deleted"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/UserListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get a user",
        "operationId": "GetUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user details",
            "schema": {
              "$ref": "#/definitions/UserRepresentation"
            }
          },
          "404": {
            "description": "Requested user was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get the current user",
        "operationId": "GetCurrentUser",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Current user details",
            "schema": {
              "$ref": "#/definitions/UserRepresentation"
            }
          },
          "404": {
            "description": "Current user was not found (huh?)"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 1
      }
    },
    "/users/{userId}/photo": {
      "get": {
        "tags": [
          "User API:Users"
        ],
        "summary": "Get a user photo",
        "operationId": "GetUserPhoto",
        "consumes": [],
        "produces": [
          "image/jpeg",
          "image/gif",
          "image/png"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user photo",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Requested user photo was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Users",
        "x-apiOrder": 2
      }
    },
    "/users/{userId}/usertasks": {
      "get": {
        "tags": [
          "User API:Tasks"
        ],
        "summary": "Find user tasks",
        "operationId": "FindUserUserTasks",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Search for tasks starting at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Old",
                "Complete"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of user tasks matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/UserTaskListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/users/{userId}/usergroups": {
      "get": {
        "tags": [
          "User API:Groups"
        ],
        "summary": "Get user groups",
        "operationId": "GetUserUserGroups",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups that the specified user belongs to",
            "schema": {
              "$ref": "#/definitions/UserGroupListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 20
      }
    },
    "/usertasks": {
      "get": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Find user tasks",
        "operationId": "FindUserTasks",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Search for tasks assigned to or owned by the specified users",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Search for tasks starting at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "User Id - search for companies created by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "createdAt",
            "in": "query",
            "description": "Search for tasks created at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedBy",
            "in": "query",
            "description": "User Id - search for companies last updated by the specified user(s)",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Search for tasks updated at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Old",
                "Complete"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of user tasks matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/UserTaskListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/usertasks/{taskId}": {
      "get": {
        "tags": [
          "User Task API:Tasks"
        ],
        "summary": "Get a user task",
        "operationId": "GetUserTask",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user task",
            "schema": {
              "$ref": "#/definitions/UserTaskRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usertask"
            ]
          }
        ],
        "x-apiName": "User Task API",
        "x-apiGroup": "Tasks",
        "x-apiOrder": 10
      }
    },
    "/usergroups": {
      "get": {
        "tags": [
          "User Group API:Groups"
        ],
        "summary": "Find groups",
        "operationId": "FindUserGroups",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/UserGroupListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 100
      }
    },
    "/usergroups/{groupId}": {
      "get": {
        "tags": [
          "User Group API:Groups"
        ],
        "summary": "Get a group",
        "operationId": "GetUserGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user group details",
            "schema": {
              "$ref": "#/definitions/UserGroupRepresentation"
            }
          },
          "404": {
            "description": "Requested user group was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_usergroup"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Groups",
        "x-apiOrder": 100
      }
    },
    "/usergroups/{groupId}/users": {
      "get": {
        "tags": [
          "User Group API:Users"
        ],
        "summary": "Get users",
        "operationId": "GetGroupUsers",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users belonging to the specified user group",
            "schema": {
              "$ref": "#/definitions/UserListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Group API",
        "x-apiGroup": "Users",
        "x-apiOrder": 100
      }
    },
    "/useroffices": {
      "get": {
        "tags": [
          "User Office API:Offices"
        ],
        "summary": "Find user offices",
        "operationId": "FindUserOffices",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of user offices matching the specified criteria",
            "schema": {
              "$ref": "#/definitions/UserOfficeListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Offices",
        "x-apiOrder": 100
      }
    },
    "/useroffices/{officeId}": {
      "get": {
        "tags": [
          "User Office API:Offices"
        ],
        "summary": "Get a user office",
        "operationId": "GetUserOffice",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested user office details",
            "schema": {
              "$ref": "#/definitions/UserOfficeRepresentation"
            }
          },
          "404": {
            "description": "Requested user office was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Offices",
        "x-apiOrder": 100
      }
    },
    "/useroffices/{officeId}/users": {
      "get": {
        "tags": [
          "User Office API:Users"
        ],
        "summary": "Get users",
        "operationId": "GetOfficeUsers",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "officeId",
            "in": "path",
            "description": "Office Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users belonging to the specified office",
            "schema": {
              "$ref": "#/definitions/UserListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_user"
            ]
          }
        ],
        "x-apiName": "User Office API",
        "x-apiGroup": "Users",
        "x-apiOrder": 100
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Category API:Categories"
        ],
        "summary": "Find categories",
        "operationId": "FindCategories",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "embed",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SubCategories",
                "Skills"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "schema": {
              "$ref": "#/definitions/CategoryListRepresentation"
            }
          }
        },
        "x-apiName": "Category API",
        "x-apiGroup": "Categories",
        "x-apiOrder": 100
      }
    },
    "/countries": {
      "get": {
        "tags": [
          "Location API:Countries"
        ],
        "summary": "Find countries",
        "operationId": "FindCountries",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of countries",
            "schema": {
              "$ref": "#/definitions/CountryListRepresentation"
            }
          }
        },
        "x-apiName": "Location API",
        "x-apiGroup": "Countries",
        "x-apiOrder": 100
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Location API:Locations"
        ],
        "summary": "Find locations",
        "operationId": "FindLocations",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "embed",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Areas"
              ]
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations",
            "schema": {
              "$ref": "#/definitions/LocationListRepresentation"
            }
          }
        },
        "x-apiName": "Location API",
        "x-apiGroup": "Locations",
        "x-apiOrder": 100
      }
    },
    "/worktypes": {
      "get": {
        "tags": [
          "Work Type API:Work Types"
        ],
        "summary": "Find work types",
        "operationId": "FindWorkTypes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "workTypeId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of work types",
            "schema": {
              "$ref": "#/definitions/WorkTypeListRepresentation"
            }
          }
        },
        "x-apiName": "Work Type API",
        "x-apiGroup": "Work Types",
        "x-apiOrder": 100
      }
    },
    "/partners/actions": {
      "get": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Find partner actions",
        "operationId": "FindPartnerActions",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionType",
            "in": "query",
            "description": "Type of action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Job",
                "JobAd",
                "Candidate",
                "JobApplication",
                "Placement",
                "Company",
                "Contact"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "actionId",
            "in": "query",
            "description": "Unique identifier for partner actions",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reference",
            "in": "query",
            "description": "Partner supplied unique reference for the action",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "List of partner actions",
            "schema": {
              "$ref": "#/definitions/PartnerActionListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      }
    },
    "/partners/actions/{act}": {
      "get": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Get a partner action",
        "operationId": "GetPartnerAction",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested partner action",
            "schema": {
              "$ref": "#/definitions/PartnerActionRepresentation"
            }
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "put": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Update a partner action",
        "operationId": "UpdatePartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePartnerActionCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PartnerActionRepresentation"
            }
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "post": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Add a partner action",
        "operationId": "AddPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action type. The type cannot be changed once assigned.",
            "required": true,
            "type": "string",
            "enum": [
              "Job",
              "JobAd",
              "Candidate",
              "JobApplication",
              "Placement",
              "Company",
              "Contact"
            ]
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PartnerActionRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      },
      "delete": {
        "tags": [
          "Partner Action API:Actions"
        ],
        "summary": "Delete a partner action",
        "operationId": "DeletePartnerAction",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "act",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "404": {
            "description": "Partner action was not found"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "partner_ui_action"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Actions",
        "x-apiOrder": 1
      }
    },
    "/partners/actions/{actionId}/applications": {
      "get": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Find job applications submitted to an action",
        "operationId": "GetPartnerActionJobApplications",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job applications submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/JobApplicationListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobapplication"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Complete a job application action",
        "operationId": "CompleteJobApplicationPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobApplicationPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Update job application action progress",
        "operationId": "ProgressJobApplicationPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobApplicationPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/applications/{applicationId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Job Applications"
        ],
        "summary": "Reject a job application action",
        "operationId": "RejectJobApplicationPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "applicationId",
            "in": "path",
            "description": "Job Application Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobApplicationPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobapplication"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Applications",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates": {
      "get": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Find candidates submitted to an action",
        "operationId": "GetPartnerActionCandidates",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/CandidateListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_candidate"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Complete a candidate action",
        "operationId": "CompleteCandidatePartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCandidatePartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Update candidate action progress",
        "operationId": "ProgressCandidatePartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCandidatePartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/candidates/{candidateId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Candidates"
        ],
        "summary": "Reject a candidate action",
        "operationId": "RejectCandidatePartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "candidateId",
            "in": "path",
            "description": "Candidate Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCandidatePartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_candidate"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Candidates",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies": {
      "get": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Find companies submitted to an action",
        "operationId": "GetPartnerActionCompanies",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of companies submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/CompanyListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_company"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Complete a company action",
        "operationId": "CompleteCompanyPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Update company action progress",
        "operationId": "ProgressCompanyPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/companies/{companyId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Companies"
        ],
        "summary": "Reject a company action",
        "operationId": "RejectCompanyPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCompanyPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_company"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Companies",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts": {
      "get": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Find contacts submitted to an action",
        "operationId": "GetPartnerActionContacts",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/ContactListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_contact"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Complete a contact action",
        "operationId": "CompleteContactPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Update contact action progress",
        "operationId": "ProgressContactPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/contacts/{contactId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Contacts"
        ],
        "summary": "Reject a contact action",
        "operationId": "RejectContactPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_contact"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Contacts",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads": {
      "get": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Find job ads submitted to an action",
        "operationId": "GetPartnerActionJobAds",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of job ads submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/JobAdListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_jobad"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{jobAdId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Complete a job ad action",
        "operationId": "CompleteJobAdPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "adId",
            "in": "query",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobAdPartnerActionCommand"
            }
          },
          {
            "name": "jobAdId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{jobAdId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Update job ad action progress",
        "operationId": "ProgressJobAdPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "adId",
            "in": "query",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobAdPartnerActionCommand"
            }
          },
          {
            "name": "jobAdId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobads/{jobAdId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Job Ads"
        ],
        "summary": "Reject a job ad action",
        "operationId": "RejectJobAdPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "adId",
            "in": "query",
            "description": "Job Ad Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobAdPartnerActionCommand"
            }
          },
          {
            "name": "jobAdId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_jobad"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Job Ads",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs": {
      "get": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Find jobs submitted to an action",
        "operationId": "GetPartnerActionJobOrders",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of jobs submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/JobOrderListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_job"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Complete a job action",
        "operationId": "CompleteJobOrderPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobOrderPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Update job action progress",
        "operationId": "ProgressJobOrderPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobOrderPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/jobs/{jobId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Jobs"
        ],
        "summary": "Reject a job action",
        "operationId": "RejectJobOrderPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "Job Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateJobOrderPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_job"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Jobs",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements": {
      "get": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Find placements submitted to an action",
        "operationId": "GetPartnerActionPlacements",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "stage",
            "in": "query",
            "description": "Include partner actions at a specific stage",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Submitted",
                "InProgress",
                "Completed",
                "Rejected",
                "Cancelled"
              ]
            },
            "collectionFormat": "csv"
          },
          {
            "name": "submittedAt",
            "in": "query",
            "description": "Search for entities submitted to an action at a specific date and time \r\n(UTC assumed, [ISO date-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)). \r\nPrefix with <code>&lt;</code> or <code>&gt;</code> to search dates before or after (inclusive) the specified date and time.\r\nSpecify multiple times to search for a range.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The index of the first entry to return from the resource collection",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of entries to return.<br />\r\nSetting to 0 will return only the total count of matching resources.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "maximum": 1000,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "List of placements submitted to the specified partner action",
            "schema": {
              "$ref": "#/definitions/PlacementListRepresentation"
            }
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "read",
              "read_placement"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/complete": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Complete a placement action",
        "operationId": "CompletePlacementPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlacementPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/progress": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Update placement action progress",
        "operationId": "ProgressPlacementPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlacementPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    },
    "/partners/actions/{actionId}/placements/{placementId}/reject": {
      "put": {
        "tags": [
          "Partner Action API:Placements"
        ],
        "summary": "Reject a placement action",
        "operationId": "RejectPlacementPartnerAction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "Action Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "placementId",
            "in": "path",
            "description": "Placement Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "command",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePlacementPartnerActionCommand"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          }
        },
        "security": [
          {
            "jobadder_identity": [
              "write",
              "write_placement"
            ]
          }
        ],
        "x-apiName": "Partner Action API",
        "x-apiGroup": "Placements",
        "x-apiOrder": 51
      }
    }
  },
  "definitions": {
    "ModelLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "PlacementTimesheetDaysModel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlacementTimesheetEntryModel"
        },
        {
          "type": "object",
          "properties": {
            "date": {
              "format": "date",
              "type": "string",
              "properties": {
                "timeOfDay": {
                  "format": "time"
                }
              }
            },
            "type": {
              "enum": [
                "Days"
              ],
              "type": "object"
            },
            "halfDay": {
              "type": "boolean"
            }
          }
        }
      ],
      "properties": {}
    },
    "CandidateListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CandidateSummaryModel": {
      "required": [
        "candidateId"
      ],
      "type": "object",
      "properties": {
        "candidateId": {
          "format": "int32",
          "description": "Candidate Id",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Contact phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "contactMethod": {
          "description": "Preferred contact method",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/AddressModel",
          "description": "Candidate address"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Status of the candidate"
        },
        "rating": {
          "description": "Internal rating of the candidate",
          "type": "string"
        },
        "source": {
          "description": "The source of the candidate",
          "type": "string"
        },
        "seeking": {
          "description": "Indicates whether or not the candidate is actively seeking a job.",
          "enum": [
            "Yes",
            "Maybe",
            "No"
          ],
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PageLinks": {
      "type": "object",
      "properties": {
        "first": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "last": {
          "type": "string"
        }
      }
    },
    "AddressModel": {
      "type": "object",
      "properties": {
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "StatusModel": {
      "required": [
        "statusId",
        "name"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        }
      }
    },
    "UserNameModel": {
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "AddCandidateCommand": {
      "type": "object",
      "properties": {
        "firstName": {
          "maxLength": 50,
          "type": "string"
        },
        "lastName": {
          "maxLength": 50,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "maxLength": 50,
          "type": "string"
        },
        "mobile": {
          "maxLength": 50,
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "maxLength": 20,
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Candidate status",
          "type": "integer"
        },
        "rating": {
          "maxLength": 50,
          "type": "string"
        },
        "source": {
          "description": "Candidate source",
          "maxLength": 50,
          "type": "string"
        },
        "seeking": {
          "enum": [
            "Yes",
            "Maybe",
            "No"
          ],
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "address": {
          "$ref": "#/definitions/SubmitAddressModel"
        },
        "skillTags": {
          "maxLength": 100,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "employment": {
          "$ref": "#/definitions/SubmitEmploymentModel"
        },
        "availability": {
          "$ref": "#/definitions/SubmitCandidateAvailabilityModel",
          "description": "The date the candidate is available to start. Specify either immediate, relative or date."
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCandidateEducationModel"
          }
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "SubmitAddressModel": {
      "type": "object",
      "properties": {
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "SubmitEmploymentModel": {
      "type": "object",
      "properties": {
        "current": {
          "$ref": "#/definitions/SubmitCurrentEmploymentModel"
        },
        "ideal": {
          "$ref": "#/definitions/SubmitIdealEmploymentModel"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateEmploymentHistoryModel"
          }
        }
      }
    },
    "SubmitCandidateAvailabilityModel": {
      "description": "The date the candidate is available to start. Specify ONE OF immediate, relative or date.",
      "type": "object",
      "properties": {
        "immediate": {
          "description": "The candidate is available for an immediate start",
          "type": "boolean"
        },
        "relative": {
          "$ref": "#/definitions/SubmitRelativeStartModel",
          "description": "The amount of notice time the candidate must give to end their current employment\r\nAllowed values are 1-4 weeks, 1-6 months"
        },
        "date": {
          "format": "date",
          "description": "The specific date that a job starts or a candidate is available",
          "type": "string"
        }
      }
    },
    "SubmitCandidateEducationModel": {
      "type": "object",
      "properties": {
        "institution": {
          "type": "string"
        },
        "course": {
          "type": "string"
        },
        "date": {
          "description": "Year, month or date completed.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
          "type": "string"
        }
      }
    },
    "SubmitCustomFieldValueModel": {
      "required": [
        "fieldId"
      ],
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "description": "Text, List or Date ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6)) value for this custom field (depending on the field `type`)",
          "type": "object"
        }
      },
      "example": {
        "fieldId": 1,
        "value": "Text value"
      }
    },
    "SubmitCurrentEmploymentModel": {
      "type": "object",
      "properties": {
        "employer": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitSalaryModel"
        }
      }
    },
    "SubmitIdealEmploymentModel": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitSalaryRangeModel"
        },
        "other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitIdealSalaryModel"
          }
        }
      }
    },
    "CandidateEmploymentHistoryModel": {
      "type": "object",
      "properties": {
        "employer": {
          "description": "Name of the employer",
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "start": {
          "description": "Year, month or date employment started.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
          "type": "string"
        },
        "end": {
          "description": "Year, month or date employment finished, or \"Present\" for a current role.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
          "type": "string"
        },
        "description": {
          "description": "Description of responsibilities and achievements.",
          "type": "string"
        }
      }
    },
    "SubmitRelativeStartModel": {
      "type": "object",
      "properties": {
        "period": {
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "enum": [
            "Week",
            "Month"
          ],
          "type": "string"
        }
      }
    },
    "SubmitSalaryModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rate": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        }
      }
    },
    "SubmitSalaryRangeModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rateLow": {
          "format": "double",
          "type": "number"
        },
        "rateHigh": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        }
      }
    },
    "SubmitIdealSalaryModel": {
      "type": "object",
      "properties": {
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitSalaryRangeModel"
        }
      }
    },
    "CandidateRepresentation": {
      "required": [
        "candidateId"
      ],
      "type": "object",
      "properties": {
        "candidateId": {
          "format": "int32",
          "description": "Candidate Id",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Contact phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "contactMethod": {
          "description": "Preferred contact method",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/AddressModel",
          "description": "Candidate address"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Status of the candidate"
        },
        "rating": {
          "description": "Internal rating of the candidate",
          "type": "string"
        },
        "source": {
          "description": "The source of the candidate",
          "type": "string"
        },
        "seeking": {
          "description": "Indicates whether or not the candidate is actively seeking a job.",
          "enum": [
            "Yes",
            "Maybe",
            "No"
          ],
          "type": "string"
        },
        "otherEmail": {
          "description": "Other email addresses used by the candidate",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "social": {
          "description": "Candidate social profiles",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "summary": {
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/CandidateEmploymentModel"
        },
        "availability": {
          "$ref": "#/definitions/CandidateStartModel",
          "description": ""
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateEducationModel"
          }
        },
        "skillTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "statistics": {
          "$ref": "#/definitions/CandidateStatisticsModel"
        },
        "links": {
          "$ref": "#/definitions/CandidateLinks"
        }
      }
    },
    "CandidateEmploymentModel": {
      "type": "object",
      "properties": {
        "current": {
          "$ref": "#/definitions/CurrentEmploymentModel"
        },
        "ideal": {
          "$ref": "#/definitions/CandidateIdealEmploymentModel"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateEmploymentHistoryModel"
          }
        }
      }
    },
    "CandidateStartModel": {
      "description": "The date the candidate is available to start. Specify ONE OF immediate, relative or date.",
      "type": "object",
      "properties": {
        "immediate": {
          "type": "boolean"
        },
        "relative": {
          "$ref": "#/definitions/RelativeStartModel",
          "description": "The amount of notice time the candidate must give to end their current employment\r\nAllowed values are 1-4 weeks, 1-6 months"
        },
        "date": {
          "format": "date",
          "description": "The specific date that a job starts or a candidate is available",
          "type": "string"
        }
      }
    },
    "CandidateEducationModel": {
      "type": "object",
      "properties": {
        "institution": {
          "type": "string"
        },
        "course": {
          "type": "string"
        },
        "date": {
          "description": "Year, month or date completed.<br />\r\nYear must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), the 4 digit year the course was completed, e.g. 2017<br />\r\nMonth must be formatted as [ISO date-fullyear](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6) \"-\" [ISO date-month](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07<br />\r\nDate must be formatted as [ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6), e.g. 2017-07-31",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "CustomFieldValueModel": {
      "description": "Custom field value",
      "required": [
        "fieldId",
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Text",
            "List",
            "Date",
            "Lookup"
          ],
          "type": "string"
        },
        "value": {
          "description": "Text, List or Date value for this custom field (depending on the field \"type\")",
          "type": "object",
          "readOnly": true
        }
      }
    },
    "PartnerActionStageModel": {
      "type": "object",
      "properties": {
        "actionId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "actionName": {
          "type": "string"
        },
        "reference": {
          "description": "Unique partner defined reference/identifier for the action",
          "type": "string"
        },
        "stage": {
          "enum": [
            "Submitted",
            "InProgress",
            "Completed",
            "Rejected",
            "Cancelled"
          ],
          "type": "string"
        },
        "status": {
          "description": "Partner defined progress status message for the action",
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultModel"
        },
        "submittedAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "submittedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        }
      }
    },
    "CandidateStatisticsModel": {
      "type": "object",
      "properties": {
        "applications": {
          "$ref": "#/definitions/CandidateJobApplicationStatisticsSummaryModel"
        },
        "placements": {
          "$ref": "#/definitions/CandidatePlacementStatisticsSummaryModel"
        }
      }
    },
    "CandidateLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "skills": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        },
        "videos": {
          "type": "string"
        },
        "floats": {
          "type": "string"
        },
        "submissions": {
          "type": "string"
        },
        "applications": {
          "type": "string"
        },
        "placements": {
          "type": "string"
        }
      }
    },
    "CurrentEmploymentModel": {
      "type": "object",
      "properties": {
        "employer": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "workType": {
          "$ref": "#/definitions/WorkTypeModel"
        },
        "salary": {
          "$ref": "#/definitions/SalaryModel"
        }
      }
    },
    "CandidateIdealEmploymentModel": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "workType": {
          "$ref": "#/definitions/WorkTypeModel"
        },
        "salary": {
          "$ref": "#/definitions/SalaryRangeModel"
        },
        "other": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateIdealSalaryModel"
          }
        }
      }
    },
    "RelativeStartModel": {
      "type": "object",
      "properties": {
        "period": {
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "enum": [
            "Week",
            "Month"
          ],
          "type": "string"
        }
      }
    },
    "PartnerActionResultModel": {
      "type": "object",
      "properties": {
        "score": {
          "format": "int32",
          "description": "Optional partner score for the action result",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "description": "Optional partner defined URL for the action result",
          "type": "string"
        },
        "urlType": {
          "description": "Present <seealso cref=\"P:JobAdder.ApiServer.Models.PartnerActionResultModel.Url\">resultUrl</seealso> as either an embedded <seealso cref=\"F:JobAdder.ApiServer.Models.PartnerActionResultUrlType.Popup\">popup</seealso>, \r\nor open a <seealso cref=\"F:JobAdder.ApiServer.Models.PartnerActionResultUrlType.Page\">page</seealso> (in a new window or tab)",
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        }
      }
    },
    "CandidateJobApplicationStatisticsSummaryModel": {
      "type": "object",
      "properties": {
        "new": {
          "format": "int32",
          "type": "integer"
        },
        "active": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CandidatePlacementStatisticsSummaryModel": {
      "type": "object",
      "properties": {
        "total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "WorkTypeModel": {
      "required": [
        "workTypeId",
        "name"
      ],
      "type": "object",
      "properties": {
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        }
      }
    },
    "SalaryModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rate": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        }
      }
    },
    "SalaryRangeModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rateLow": {
          "format": "double",
          "type": "number"
        },
        "rateHigh": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        }
      }
    },
    "CandidateIdealSalaryModel": {
      "type": "object",
      "properties": {
        "workType": {
          "$ref": "#/definitions/WorkTypeModel"
        },
        "salary": {
          "$ref": "#/definitions/SalaryRangeModel"
        }
      }
    },
    "ErrorModel": {
      "required": [
        "message"
      ],
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorItemModel"
          }
        }
      }
    },
    "ErrorItemModel": {
      "type": "object",
      "properties": {
        "code": {
          "enum": [
            "Invalid",
            "Missing",
            "MissingField",
            "AlreadyExists"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateCandidateCommand": {
      "type": "object",
      "properties": {
        "firstName": {
          "maxLength": 50,
          "type": "string"
        },
        "lastName": {
          "maxLength": 50,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "maxLength": 50,
          "type": "string"
        },
        "mobile": {
          "maxLength": 50,
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "maxLength": 20,
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Candidate status",
          "type": "integer"
        },
        "rating": {
          "maxLength": 50,
          "type": "string"
        },
        "seeking": {
          "enum": [
            "Yes",
            "Maybe",
            "No"
          ],
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "address": {
          "$ref": "#/definitions/SubmitAddressModel"
        },
        "skillTags": {
          "maxLength": 100,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "employment": {
          "$ref": "#/definitions/SubmitEmploymentModel"
        },
        "availability": {
          "$ref": "#/definitions/SubmitCandidateAvailabilityModel",
          "description": "The date the candidate is available to start. Specify either immediate, relative or date."
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCandidateEducationModel"
          }
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "CandidateAttachmentListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateAttachmentModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CandidateAttachmentModel": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "Resume",
            "CoverLetter",
            "FormattedResume",
            "Screening",
            "Check",
            "Reference",
            "License"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateCandidateAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "Resume",
            "CoverLetter",
            "FormattedResume",
            "Screening",
            "Check",
            "Reference",
            "License"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "CandidateAttachmentRepresentation": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "Resume",
            "CoverLetter",
            "FormattedResume",
            "Screening",
            "Check",
            "Reference",
            "License"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/CandidateAttachmentLinks"
        }
      }
    },
    "CandidateAttachmentLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "CandidateAttachmentCategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateAttachmentCategoryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "CandidateAttachmentCategoryModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Resume",
            "CoverLetter",
            "FormattedResume",
            "Screening",
            "Check",
            "Reference",
            "License"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "CandidateAvailabilityListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateAvailabilityModel"
          },
          "readOnly": true,
          "example": [
            {
              "date": "2018-06-30",
              "day": "Saturday",
              "shifts": [
                {
                  "start": "09:00",
                  "end": "12:00"
                },
                {
                  "start": "13:00",
                  "end": "17:00"
                }
              ]
            },
            {
              "date": "2018-07-01",
              "day": "Sunday",
              "shifts": [
                {
                  "start": "09:00",
                  "end": "12:00"
                }
              ],
              "recurring": true,
              "until": "2018-09-30"
            }
          ]
        }
      }
    },
    "CandidateAvailabilityModel": {
      "type": "object",
      "properties": {
        "date": {
          "format": "date",
          "description": "Date available ([ISO full-date](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "day": {
          "description": "Day of week the shift times apply to",
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "shifts": {
          "description": "Time available, at least one and at most two shifts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeRangeModel"
          },
          "readOnly": true
        },
        "recurring": {
          "description": "Availability is repeated in following weeks",
          "type": "boolean"
        },
        "until": {
          "format": "date",
          "description": "Optional end date of repeating availability",
          "type": "string"
        }
      },
      "example": {
        "recurring": {
          "start": "2018-07-01",
          "end": "2018-09-30"
        },
        "day": "Monday",
        "shifts": [
          {
            "start": "09:00",
            "end": "12:00"
          },
          {
            "start": "13:00",
            "end": "17:00"
          }
        ]
      }
    },
    "TimeRangeModel": {
      "description": "Time of day interval",
      "type": "object",
      "properties": {
        "start": {
          "format": "time",
          "description": "Start time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
          "type": "string"
        },
        "end": {
          "format": "time",
          "description": "End time of day interval ([ISO partial-time](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6))",
          "type": "string"
        }
      }
    },
    "SetCandidateAvailabilityByWeekCommand": {
      "required": [
        "weekOf",
        "availability"
      ],
      "type": "object",
      "properties": {
        "weekOf": {
          "format": "date",
          "description": "Update availability for the week (beginning Sunday) containing the specified date",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "availability": {
          "description": "Weekly availability, at most two shifts per day",
          "type": "object",
          "properties": {
            "sunday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "monday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "tuesday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "wednesday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "thursday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "friday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            },
            "saturday": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimeRangeModel"
              }
            }
          }
        },
        "recurring": {
          "description": "Availability repeats in following weeks. Previous/past recurring schedules will be terminated prior to this schedule, existing future overlapping schedules will be cancelled.",
          "type": "boolean"
        },
        "until": {
          "format": "date",
          "description": "Optional end date of repeating availability",
          "type": "string"
        }
      }
    },
    "CustomFieldListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      },
      "example": {
        "items": [
          {
            "fieldId": 1,
            "name": "Text Field 1",
            "type": "Text",
            "mandatory": true,
            "maxLength": 50,
            "multiLine": true
          },
          {
            "fieldId": 2,
            "name": "List Field 2",
            "type": "List",
            "mandatory": true,
            "multiSelect": true,
            "values": [
              "Value 1",
              "Value 2",
              "Value 3"
            ]
          },
          {
            "fieldId": 3,
            "name": "Date Field 3",
            "type": "Date",
            "mandatory": true
          }
        ]
      }
    },
    "CustomFieldModel": {
      "required": [
        "fieldId",
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Text",
            "List",
            "Date",
            "Lookup"
          ],
          "type": "string"
        },
        "mandatory": {
          "description": "Field is mandatory and a value must be provided",
          "type": "boolean"
        },
        "maxLength": {
          "format": "int32",
          "description": "Maximum length of a text field",
          "type": "integer"
        },
        "multiLine": {
          "description": "Text field can contain a multi-line value",
          "type": "boolean"
        },
        "multiSelect": {
          "description": "List field allows multiple selections",
          "type": "boolean"
        },
        "values": {
          "description": "Available values for a list custom field",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CustomFieldRepresentation": {
      "required": [
        "fieldId",
        "name",
        "type"
      ],
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Text",
            "List",
            "Date",
            "Lookup"
          ],
          "type": "string"
        },
        "mandatory": {
          "description": "Field is mandatory and a value must be provided",
          "type": "boolean"
        },
        "maxLength": {
          "format": "int32",
          "description": "Maximum length of a text field",
          "type": "integer"
        },
        "multiLine": {
          "description": "Text field can contain a multi-line value",
          "type": "boolean"
        },
        "multiSelect": {
          "description": "List field allows multiple selections",
          "type": "boolean"
        },
        "values": {
          "description": "Available values for a list custom field",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      },
      "example": {
        "fieldId": 1,
        "name": "Text Field 1",
        "type": "Text",
        "mandatory": true,
        "maxLength": 50,
        "multiLine": true,
        "multiSelect": false,
        "values": []
      }
    },
    "FloatListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FloatSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "FloatSummaryModel": {
      "required": [
        "floatId"
      ],
      "type": "object",
      "properties": {
        "floatId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CompanyNameModel": {
      "required": [
        "companyId"
      ],
      "type": "object",
      "properties": {
        "companyId": {
          "format": "int32",
          "description": "Unique identifier for the company",
          "type": "integer"
        },
        "name": {
          "description": "Company name",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        }
      }
    },
    "JobApplicationListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "JobApplicationSummaryModel": {
      "required": [
        "applicationId"
      ],
      "type": "object",
      "properties": {
        "applicationId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "jobReference": {
          "type": "string"
        },
        "manual": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/JobApplicationStatusModel"
        },
        "review": {
          "$ref": "#/definitions/JobApplicationReviewModel"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "job": {
          "$ref": "#/definitions/JobOrderSummaryModel"
        },
        "jobAd": {
          "$ref": "#/definitions/JobAdSummaryModel"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobApplicationStatusModel": {
      "required": [
        "statusId",
        "name"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "rejected": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "defaultRejected": {
          "type": "boolean"
        },
        "workflow": {
          "$ref": "#/definitions/JobApplicationWorkflowModel"
        }
      }
    },
    "JobApplicationReviewModel": {
      "required": [
        "stage"
      ],
      "type": "object",
      "properties": {
        "stage": {
          "enum": [
            "Submitted",
            "Viewed",
            "Accepted",
            "Rejected"
          ],
          "type": "string"
        },
        "submittedAt": {
          "format": "date-time",
          "type": "string"
        },
        "submittedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "reviewedAt": {
          "format": "date-time",
          "type": "string"
        },
        "reviewedBy": {
          "$ref": "#/definitions/ContactNameModel"
        }
      }
    },
    "JobOrderSummaryModel": {
      "required": [
        "jobId"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "source": {
          "type": "string"
        },
        "userFavourite": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "closedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "closedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobAdSummaryModel": {
      "required": [
        "adId"
      ],
      "type": "object",
      "properties": {
        "adId": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "postAt": {
          "format": "date-time",
          "type": "string"
        },
        "expireAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobApplicationWorkflowModel": {
      "required": [
        "stage"
      ],
      "type": "object",
      "properties": {
        "stage": {
          "description": "Name of the workflow stage",
          "type": "string"
        },
        "stageIndex": {
          "format": "int32",
          "description": "Position in the workflow",
          "type": "integer"
        },
        "step": {
          "format": "int32",
          "description": "[Obsolete] Please reference stageIndex instead",
          "type": "integer"
        },
        "progress": {
          "description": "General progress indicator",
          "enum": [
            "Started",
            "InProgress",
            "Complete"
          ],
          "type": "string"
        }
      }
    },
    "ContactNameModel": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Unique identifier for the contact",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Contact status"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Contact owner"
        }
      }
    },
    "AddCandidateJobOrderCommand": {
      "required": [
        "jobId"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "source": {
          "type": "string"
        }
      }
    },
    "NoteListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NoteSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "NoteSummaryModel": {
      "required": [
        "noteId"
      ],
      "type": "object",
      "properties": {
        "noteId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "type": "string"
        },
        "textPartial": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "readonly": {
          "description": "This note cannot be updated",
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "AddCandidateNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "applicationId": {
          "description": "Optional list of related job applications to link to the note",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "NoteModel": {
      "required": [
        "noteId"
      ],
      "type": "object",
      "properties": {
        "noteId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "readonly": {
          "type": "boolean"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NoteAttachmentModel"
          }
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderTitleModel"
          }
        },
        "requisitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionSummaryModel"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateNameModel"
          }
        },
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationSummaryModel"
          }
        },
        "placements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementSummaryModel"
          }
        },
        "companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyNameModel"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactNameModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NoteAttachmentModel": {
      "required": [
        "attachmentId"
      ],
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel",
          "description": "User who added the note attachment if different to the user who created the note"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        }
      }
    },
    "JobOrderTitleModel": {
      "required": [
        "jobId"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "source": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        }
      }
    },
    "RequisitionSummaryModel": {
      "required": [
        "requisitionId",
        "jobTitle"
      ],
      "type": "object",
      "properties": {
        "requisitionId": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "enum": [
            "Draft",
            "Submitted",
            "Rejected",
            "Approved"
          ],
          "type": "string"
        },
        "workflowStageIndex": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "hiringManager": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CandidateNameModel": {
      "required": [
        "candidateId"
      ],
      "type": "object",
      "properties": {
        "candidateId": {
          "format": "int32",
          "description": "Candidate Id",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Contact phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "contactMethod": {
          "description": "Preferred contact method",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/AddressModel",
          "description": "Candidate address"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Status of the candidate"
        },
        "rating": {
          "description": "Internal rating of the candidate",
          "type": "string"
        },
        "source": {
          "description": "The source of the candidate",
          "type": "string"
        },
        "seeking": {
          "description": "Indicates whether or not the candidate is actively seeking a job.",
          "enum": [
            "Yes",
            "Maybe",
            "No"
          ],
          "type": "string"
        }
      }
    },
    "PlacementSummaryModel": {
      "required": [
        "placementId",
        "type"
      ],
      "type": "object",
      "properties": {
        "placementId": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "job": {
          "$ref": "#/definitions/JobOrderTitleModel"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateNameModel"
        },
        "approved": {
          "type": "boolean"
        },
        "approvedAt": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "enum": [
            "Permanent",
            "Contract",
            "Temporary",
            "Credit"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Status of the placement"
        },
        "startDate": {
          "format": "date",
          "description": "Date employment begins",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "description": "Date a contract or temporary employment ends",
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "NoteTypeListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NoteTypeModel"
          }
        }
      }
    },
    "NoteTypeModel": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "default": {
          "$ref": "#/definitions/NoteTypeDefaultModel"
        }
      }
    },
    "NoteTypeDefaultModel": {
      "type": "object",
      "properties": {
        "note": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        },
        "sms": {
          "type": "boolean"
        }
      }
    },
    "PlacementListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CandidateRatingListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "NameModel": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Resource name",
          "type": "string"
        }
      }
    },
    "SalutationListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "CategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryModel"
          }
        }
      }
    },
    "CategoryModel": {
      "required": [
        "categoryId",
        "name"
      ],
      "type": "object",
      "properties": {
        "categoryId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "subCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubCategoryModel"
          }
        }
      }
    },
    "SubCategoryModel": {
      "required": [
        "subCategoryId",
        "name"
      ],
      "type": "object",
      "properties": {
        "subCategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "skills": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SkillCategoryModel"
          }
        }
      }
    },
    "SkillCategoryModel": {
      "required": [
        "skillId",
        "name"
      ],
      "type": "object",
      "properties": {
        "skillId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CandidateSourceListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "SetCandidateStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "SetStatusNoteModel": {
      "description": "Optional note",
      "type": "object",
      "properties": {
        "type": {
          "description": "Optional note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        }
      }
    },
    "StatusListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "StatusRepresentation": {
      "required": [
        "statusId",
        "name"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      }
    },
    "SubmissionListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmissionSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "SubmissionSummaryModel": {
      "required": [
        "submissionId"
      ],
      "type": "object",
      "properties": {
        "submissionId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "job": {
          "$ref": "#/definitions/JobOrderSummaryModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CandidateVideoListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateVideoModel"
          }
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CandidateVideoModel": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Profile",
            "CoverLetter"
          ],
          "type": "string"
        },
        "url": {
          "description": "Video URL",
          "type": "string"
        },
        "reference": {
          "description": "Optional unique reference for this video type.",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Date this video was added to the candidate",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "Date this video was last updated (updates are possible when a video is added with a Reference)",
          "type": "string"
        }
      }
    },
    "CandidateVideoRepresentation": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Profile",
            "CoverLetter"
          ],
          "type": "string"
        },
        "url": {
          "description": "Video URL",
          "type": "string"
        },
        "reference": {
          "description": "Optional unique reference for this video type.",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Date this video was added to the candidate",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "description": "Date this video was last updated (updates are possible when a video is added with a Reference)",
          "type": "string"
        }
      }
    },
    "AddCandidateVideoCommand": {
      "required": [
        "url"
      ],
      "type": "object",
      "properties": {
        "url": {
          "description": "Video URL",
          "type": "string"
        },
        "reference": {
          "description": "Optional unique reference for this video type, if specified then an existing video \r\nwith the same type and reference will be updated if found.",
          "type": "string"
        }
      }
    },
    "CompanyListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanySummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CompanySummaryModel": {
      "required": [
        "companyId"
      ],
      "type": "object",
      "properties": {
        "companyId": {
          "format": "int32",
          "description": "Unique identifier for the company",
          "type": "integer"
        },
        "name": {
          "description": "Company name",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "mainContact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "primaryAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "CompanyAddressModel": {
      "required": [
        "addressId"
      ],
      "type": "object",
      "properties": {
        "addressId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "AddCompanyCommand": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "parentCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "statusId": {
          "format": "int32",
          "description": "Company status",
          "type": "integer"
        },
        "custom": {
          "description": "Custom field values. Only the specified fields will be updated, each fieldId can specified once.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "CompanyRepresentation": {
      "required": [
        "companyId"
      ],
      "type": "object",
      "properties": {
        "companyId": {
          "format": "int32",
          "description": "Unique identifier for the company",
          "type": "integer"
        },
        "name": {
          "description": "Company name",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "mainContact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "primaryAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "summary": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/CompanyLinks"
        }
      }
    },
    "CompanyLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "contacts": {
          "type": "string"
        },
        "subsidiaries": {
          "type": "string"
        },
        "addresses": {
          "type": "string"
        },
        "skills": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        },
        "jobs": {
          "type": "string"
        },
        "requisitions": {
          "type": "string"
        },
        "floats": {
          "type": "string"
        },
        "submissions": {
          "type": "string"
        },
        "placements": {
          "type": "string"
        },
        "workflows": {
          "$ref": "#/definitions/CompanyWorkflowLinks"
        }
      }
    },
    "CompanyWorkflowLinks": {
      "type": "object",
      "properties": {
        "requisition": {
          "type": "string"
        }
      }
    },
    "UpdateCompanyCommand": {
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "mainContactId": {
          "format": "int32",
          "type": "integer"
        },
        "primaryAddressId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "parentCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "statusId": {
          "format": "int32",
          "description": "Company status",
          "type": "integer"
        },
        "custom": {
          "description": "Custom field values. Only the specified fields will be updated, each fieldId can specified once.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "CompanyAddressListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAddressModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      }
    },
    "AddCompanyAddressCommand": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CompanyAddressRepresentation": {
      "required": [
        "addressId"
      ],
      "type": "object",
      "properties": {
        "addressId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      }
    },
    "UpdateCompanyAddressCommand": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CompanyAttachmentListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAttachmentModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "CompanyAttachmentModel": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateCompanyAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "CompanyAttachmentCategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAttachmentCategoryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "CompanyAttachmentCategoryModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "ContactListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "ContactSummaryModel": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Unique identifier for the contact",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Contact status"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "officeAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Contact owner"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobOrderListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "AddCompanyNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "contactId": {
          "description": "Optional list of related contacts to link to the note",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "RequisitionListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "SetCompanyStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "CompanyWorkflowListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyWorkflowNameModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      }
    },
    "CompanyWorkflowNameModel": {
      "required": [
        "workflowId",
        "name"
      ],
      "type": "object",
      "properties": {
        "workflowId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AddCompanyWorkflowCommand": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "approvers": {
          "description": "Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCompanyWorkflowApproverModel"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "SubmitCompanyWorkflowApproverModel": {
      "required": [
        "stageIndex",
        "contactId"
      ],
      "type": "object",
      "properties": {
        "stageIndex": {
          "format": "int32",
          "type": "integer"
        },
        "contactId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "CompanyWorkflowRepresentation": {
      "required": [
        "workflowId",
        "name"
      ],
      "type": "object",
      "properties": {
        "workflowId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "approvers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyWorkflowApproverModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks"
        }
      }
    },
    "CompanyWorkflowApproverModel": {
      "required": [
        "stageIndex",
        "contactId"
      ],
      "type": "object",
      "properties": {
        "stageIndex": {
          "format": "int32",
          "type": "integer"
        },
        "contactId": {
          "format": "int32",
          "description": "Unique identifier for the contact",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Contact status"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Contact owner"
        }
      }
    },
    "UpdateCompanyWorkflowCommand": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "approvers": {
          "description": "Approvers for this workflow. Only the specified workflow stages will be updated, each stageIndex can be specified once.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCompanyWorkflowApproverModel"
          }
        }
      }
    },
    "AddContactCommand": {
      "type": "object",
      "properties": {
        "firstName": {
          "maxLength": 50,
          "type": "string"
        },
        "lastName": {
          "maxLength": 50,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "maxLength": 50,
          "type": "string"
        },
        "mobile": {
          "maxLength": 50,
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "maxLength": 20,
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "position": {
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "reportsToContactId": {
          "format": "int32",
          "type": "integer"
        },
        "statusId": {
          "format": "int32",
          "description": "Contact status",
          "type": "integer"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ContactRepresentation": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Unique identifier for the contact",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Contact status"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "officeAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "otherEmail": {
          "description": "Other email addresses used by the contact",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "social": {
          "description": "Contact social profiles",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "summary": {
          "type": "string"
        },
        "reportsTo": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "hiringManager": {
          "type": "boolean"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Contact owner"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/ContactLinks"
        }
      }
    },
    "ContactLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "candidate": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "skills": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        },
        "jobs": {
          "type": "string"
        },
        "floats": {
          "type": "string"
        },
        "submissions": {
          "type": "string"
        }
      }
    },
    "UpdateContactCommand": {
      "type": "object",
      "properties": {
        "firstName": {
          "maxLength": 50,
          "type": "string"
        },
        "lastName": {
          "maxLength": 50,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "maxLength": 50,
          "type": "string"
        },
        "mobile": {
          "maxLength": 50,
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "maxLength": 20,
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "position": {
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "reportsToContactId": {
          "format": "int32",
          "type": "integer"
        },
        "statusId": {
          "format": "int32",
          "description": "Contact status",
          "type": "integer"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "ContactAttachmentListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactAttachmentModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "ContactAttachmentModel": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateContactAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "ContactAttachmentCategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactAttachmentCategoryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "ContactAttachmentCategoryModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Terms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "AddContactNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "SetContactStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "CountryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountryModel"
          }
        }
      },
      "example": {
        "items": [
          {
            "code": "AU",
            "name": "Australia"
          },
          {
            "code": "CA",
            "name": "Canada"
          },
          {
            "code": "ID",
            "name": "Indonesia"
          },
          {
            "code": "NL",
            "name": "Netherlands"
          },
          {
            "code": "NZ",
            "name": "New Zealand"
          },
          {
            "code": "CH",
            "name": "Switzerland"
          },
          {
            "code": "AE",
            "name": "United Arab Emirates"
          },
          {
            "code": "GB",
            "name": "United Kingdom"
          },
          {
            "code": "US",
            "name": "United States"
          }
        ]
      }
    },
    "CountryModel": {
      "required": [
        "code",
        "name"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FloatRepresentation": {
      "required": [
        "floatId"
      ],
      "type": "object",
      "properties": {
        "floatId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "candidateSummary": {
          "type": "string"
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactNameModel"
          }
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "links": {
          "$ref": "#/definitions/FloatLinks"
        }
      }
    },
    "FloatLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "contacts": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "JobAdListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobAdSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "AddJobAdDraftCommand": {
      "required": [
        "title",
        "ownerUserId"
      ],
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "bulletPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "jobId": {
          "format": "int32",
          "description": "Associated job",
          "type": "integer"
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "JobAdRepresentation": {
      "required": [
        "adId"
      ],
      "type": "object",
      "properties": {
        "adId": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "bulletPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "job": {
          "$ref": "#/definitions/JobOrderTitleModel"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "screening": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobAdScreeningQuestionModel"
          }
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "postAt": {
          "format": "date-time",
          "type": "string"
        },
        "expireAt": {
          "format": "date-time",
          "type": "string"
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "links": {
          "$ref": "#/definitions/JobAdLinks"
        }
      }
    },
    "JobAdScreeningQuestionModel": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "answerType": {
          "description": "The type of expected answer\\\r\n`\"Text\"` free text\\\r\n`\"List\"` select one or more `values` from a predefinied list",
          "enum": [
            "Text",
            "List"
          ],
          "type": "string"
        },
        "mandatory": {
          "description": "Field is mandatory and a value must be provided",
          "type": "boolean"
        },
        "maxLength": {
          "format": "int32",
          "description": "Maximum length of a text field",
          "type": "integer"
        },
        "multiSelect": {
          "description": "List selection allows multiple values",
          "type": "boolean"
        },
        "values": {
          "description": "List of predefined values to select from",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JobAdLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "job": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "applications": {
          "type": "string"
        }
      }
    },
    "UpdateJobAdDraftCommand": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "bulletPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "jobId": {
          "format": "int32",
          "description": "Associated job",
          "type": "integer"
        },
        "ownerUserId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "JobApplicationRepresentation": {
      "required": [
        "applicationId"
      ],
      "type": "object",
      "properties": {
        "applicationId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "jobReference": {
          "type": "string"
        },
        "manual": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        },
        "rating": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/JobApplicationStatusModel"
        },
        "review": {
          "$ref": "#/definitions/JobApplicationReviewModel"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "job": {
          "$ref": "#/definitions/JobOrderSummaryModel"
        },
        "jobAd": {
          "$ref": "#/definitions/JobAdSummaryModel"
        },
        "submittedDetails": {
          "$ref": "#/definitions/JobApplicationSubmittedDetailsModel"
        },
        "screening": {
          "$ref": "#/definitions/JobApplicationScreeningModel"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/JobApplicationLinks"
        }
      }
    },
    "JobApplicationSubmittedDetailsModel": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        }
      }
    },
    "JobApplicationScreeningModel": {
      "type": "object",
      "properties": {
        "questions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationScreeningQuestionModel"
          }
        },
        "score": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "JobApplicationLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        },
        "resume": {
          "type": "string"
        },
        "coverLetter": {
          "type": "string"
        }
      }
    },
    "JobApplicationScreeningQuestionModel": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "answers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "UpdateJobApplicationCommand": {
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Job application status",
          "type": "integer"
        },
        "rating": {
          "format": "int32",
          "description": "Job application rating",
          "maximum": 10,
          "minimum": 0,
          "type": "integer"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        }
      }
    },
    "UpdateJobApplicationAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "Resume",
            "CoverLetter",
            "FormattedResume",
            "Screening",
            "Check",
            "Reference",
            "License"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "AddJobApplicationNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "ReviewSubmitJobApplicationCommand": {
      "type": "object",
      "properties": {
        "submittedByUserId": {
          "format": "int32",
          "description": "Optionally specify the user submitting the job application for review (if not the authenticated user)",
          "type": "integer"
        }
      }
    },
    "ReviewViewJobApplicationCommand": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Hiring manager contact viewing the applicant",
          "type": "integer"
        }
      }
    },
    "ReviewAcceptJobApplicationCommand": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Hiring manager contact accepting the applicant",
          "type": "integer"
        },
        "message": {
          "description": "Optional feedback",
          "type": "string"
        }
      }
    },
    "ReviewRejectJobApplicationCommand": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Hiring manager contact rejecting the applicant",
          "type": "integer"
        },
        "reason": {
          "description": "Optional feedback",
          "type": "string"
        }
      }
    },
    "SetJobApplicationStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "JobApplicationStatusListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationStatusModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "JobApplicationStatusRepresentation": {
      "required": [
        "statusId",
        "name"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "rejected": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "defaultRejected": {
          "type": "boolean"
        },
        "workflow": {
          "$ref": "#/definitions/JobApplicationWorkflowModel"
        },
        "links": {
          "$ref": "#/definitions/JobApplicationStatusLinks"
        }
      }
    },
    "JobApplicationStatusLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "AddJobApplicationVideoCommand": {
      "required": [
        "url"
      ],
      "type": "object",
      "properties": {
        "url": {
          "description": "Video URL",
          "type": "string"
        },
        "reference": {
          "description": "Optional unique reference for this video type, if specified then an existing video \r\nwith the same type and reference will be updated if found.",
          "type": "string"
        }
      }
    },
    "JobApplicationStatusByWorkflowListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationStatusByWorkflowModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "JobApplicationStatusByWorkflowModel": {
      "required": [
        "stage"
      ],
      "type": "object",
      "properties": {
        "stage": {
          "description": "Name of the workflow stage",
          "type": "string"
        },
        "stageIndex": {
          "format": "int32",
          "description": "Position in the workflow",
          "type": "integer"
        },
        "step": {
          "format": "int32",
          "description": "[Obsolete] Please reference stageIndex instead",
          "type": "integer"
        },
        "progress": {
          "description": "General progress indicator",
          "enum": [
            "Started",
            "InProgress",
            "Complete"
          ],
          "type": "string"
        },
        "status": {
          "description": "Ordered status list for this workflow stage",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationStatusNameModel"
          }
        }
      }
    },
    "JobApplicationStatusNameModel": {
      "required": [
        "statusId",
        "name"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "rejected": {
          "type": "boolean"
        },
        "default": {
          "type": "boolean"
        },
        "defaultRejected": {
          "type": "boolean"
        }
      }
    },
    "JobBoardListModel": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardSummaryModel"
          }
        }
      }
    },
    "JobBoardSummaryModel": {
      "type": "object",
      "properties": {
        "boardId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JobBoardModel": {
      "type": "object",
      "properties": {
        "boardId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "portal": {
          "$ref": "#/definitions/JobBoardPortalModel",
          "description": "Custom settings for a JobAdder job board portal"
        }
      }
    },
    "JobBoardPortalModel": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardPortalFieldModel"
          }
        }
      }
    },
    "JobBoardPortalFieldModel": {
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Text",
            "List"
          ],
          "type": "string"
        },
        "listValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardPortalFieldValueModel"
          }
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardPortalChildFieldModel"
          }
        }
      }
    },
    "JobBoardPortalFieldValueModel": {
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "valueId": {
          "format": "int32",
          "type": "integer"
        },
        "parentValueId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "externalValue": {
          "description": "Job board partner defined field value",
          "type": "string"
        }
      }
    },
    "JobBoardPortalChildFieldModel": {
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "Text",
            "List"
          ],
          "type": "string"
        },
        "listValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardPortalFieldValueModel"
          }
        }
      }
    },
    "JobBoardJobAdListModel": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobBoardJobAdSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "JobBoardJobAdSummaryModel": {
      "type": "object",
      "properties": {
        "adId": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "bulletPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "portal": {
          "$ref": "#/definitions/JobAdPortalSummaryModel"
        },
        "postedAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "expiresAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobAdPortalSummaryModel": {
      "type": "object",
      "properties": {
        "hotJob": {
          "description": "Classed as a hot job",
          "type": "boolean"
        },
        "salary": {
          "$ref": "#/definitions/JobAdPortalSalaryModel"
        },
        "template": {
          "type": "string"
        }
      }
    },
    "JobAdPortalSalaryModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rateLow": {
          "format": "double",
          "type": "number"
        },
        "rateHigh": {
          "format": "double",
          "type": "number"
        },
        "details": {
          "type": "string"
        }
      }
    },
    "JobBoardJobAdModel": {
      "type": "object",
      "properties": {
        "adId": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "bulletPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "screening": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobAdScreeningQuestionModel"
          }
        },
        "portal": {
          "$ref": "#/definitions/JobAdPortalModel"
        },
        "postedAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "expiresAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "JobAdPortalModel": {
      "type": "object",
      "properties": {
        "hotJob": {
          "description": "Classed as a hot job",
          "type": "boolean"
        },
        "salary": {
          "$ref": "#/definitions/JobAdPortalSalaryModel"
        },
        "template": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobAdPortalFieldModel"
          }
        }
      }
    },
    "JobAdPortalFieldModel": {
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "fieldName": {
          "type": "string"
        },
        "valueId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "externalValue": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobAdPortalChildFieldModel"
          }
        }
      }
    },
    "JobAdPortalChildFieldModel": {
      "type": "object",
      "properties": {
        "fieldId": {
          "format": "int32",
          "type": "integer"
        },
        "fieldName": {
          "type": "string"
        },
        "valueId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        },
        "externalValue": {
          "type": "string"
        }
      }
    },
    "SubmitJobApplicationCommand": {
      "required": [
        "firstName",
        "lastName",
        "email"
      ],
      "type": "object",
      "properties": {
        "firstName": {
          "maxLength": 50,
          "type": "string"
        },
        "lastName": {
          "maxLength": 50,
          "type": "string"
        },
        "salutation": {
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "phone": {
          "maxLength": 50,
          "type": "string"
        },
        "mobile": {
          "maxLength": 50,
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/SubmitAddressModel"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "facebook": "https://www.facebook.com/JobAdder",
            "twitter": "https://twitter.com/jobadder",
            "linkedin": "https://www.linkedin.com/company/866656/",
            "googleplus": "https://plus.google.com/+Jobadder",
            "youtube": "https://www.youtube.com/c/jobadder",
            "other": "https://jobadder.com/company/"
          }
        },
        "employment": {
          "$ref": "#/definitions/SubmitEmploymentModel"
        },
        "availability": {
          "$ref": "#/definitions/SubmitCandidateAvailabilityModel",
          "description": "The date the candidate is available to start. Specify either immediate, relative or date."
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCandidateEducationModel"
          }
        },
        "skillTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "screening": {
          "$ref": "#/definitions/SubmitScreeningQuesionResultsModel"
        },
        "custom": {
          "$ref": "#/definitions/SubmitJobApplicationCustomFieldsModel"
        }
      }
    },
    "SubmitScreeningQuesionResultsModel": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitScreeningQuesionAnswerModel"
          }
        },
        "score": {
          "format": "int32",
          "description": "Optional overall score for these screening results",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        }
      },
      "example": {
        "answers": [
          {
            "question": "Free-text answer for this question",
            "answer": "Free-text answer",
            "score": 65
          },
          {
            "question": "Select a single value from a list of pre-defined values",
            "answer": "List value 1",
            "score": 87
          },
          {
            "question": "Select multiple values from a list of pre-defined values",
            "answer": [
              "List value 1",
              "List value 2"
            ],
            "score": 72
          }
        ],
        "score": 75
      }
    },
    "SubmitJobApplicationCustomFieldsModel": {
      "description": "Candidate and job application custom field values",
      "type": "object",
      "properties": {
        "candidate": {
          "description": "Candidate custom field values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "application": {
          "description": "Job application custom field values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        }
      }
    },
    "SubmitScreeningQuesionAnswerModel": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "answer": {
          "description": "Text or List value answer for this screening question (depending on the question `answerType`)",
          "type": "object"
        },
        "score": {
          "format": "int32",
          "description": "Optional score for this answer",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        }
      }
    },
    "SubmittedJobApplicationModel": {
      "type": "object",
      "properties": {
        "applicationId": {
          "format": "int64",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/SubmittedJobApplicationLinks",
          "description": "Links to submit related documents for this job application<br />\r\nSee <a href=\"#operation/AttachJobBoardJobApplicationDocument\">Submit job application documents</a>",
          "readOnly": true
        }
      }
    },
    "SubmittedJobApplicationLinks": {
      "type": "object",
      "properties": {
        "resume": {
          "type": "string"
        },
        "coverLetter": {
          "type": "string"
        },
        "other": {
          "type": "string"
        }
      }
    },
    "AddJobOrderCommand": {
      "required": [
        "jobTitle"
      ],
      "type": "object",
      "properties": {
        "jobTitle": {
          "maxLength": 100,
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "contactId": {
          "format": "int32",
          "type": "integer"
        },
        "jobDescription": {
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Job status",
          "type": "integer"
        },
        "userFavourite": {
          "description": "Job is a favourite for the current user",
          "type": "boolean"
        },
        "category": {
          "$ref": "#/definitions/SubmitCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/SubmitLocationModel"
        },
        "workplaceAddressId": {
          "format": "uuid",
          "description": "Workplace Address Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "start": {
          "$ref": "#/definitions/SubmitJobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitJobOrderSalaryRangeModel"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "maxLength": 50,
          "type": "string"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "skillTags": {
          "$ref": "#/definitions/SubmitJobOrderSkillTagsModel"
        },
        "ownerUserId": {
          "format": "int32",
          "description": "User Id - Owner of this job",
          "type": "integer"
        },
        "recruiterUserId": {
          "description": "User Id - Optional list of recruiters assigned to the job",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "SubmitCategoryModel": {
      "required": [
        "categoryId"
      ],
      "type": "object",
      "properties": {
        "categoryId": {
          "format": "int32",
          "type": "integer"
        },
        "subCategoryId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SubmitLocationModel": {
      "required": [
        "locationId"
      ],
      "type": "object",
      "properties": {
        "locationId": {
          "format": "int32",
          "type": "integer"
        },
        "areaId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "SubmitJobOrderStartModel": {
      "type": "object",
      "properties": {
        "immediate": {
          "type": "boolean"
        },
        "relative": {
          "$ref": "#/definitions/SubmitRelativeStartModel"
        },
        "date": {
          "format": "date",
          "description": "The specific date that a job starts or a candidate is available",
          "type": "string"
        }
      }
    },
    "DurationModel": {
      "type": "object",
      "properties": {
        "period": {
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month"
          ],
          "type": "string"
        }
      }
    },
    "SubmitJobOrderSalaryRangeModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rateLow": {
          "format": "double",
          "type": "number"
        },
        "rateHigh": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        },
        "timePerWeek": {
          "format": "double",
          "description": "Number of days per week for a daily rate or hours per week for an hourly rate.",
          "type": "number"
        }
      }
    },
    "SubmitJobOrderSkillTagsModel": {
      "type": "object",
      "properties": {
        "matchAll": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JobOrderRepresentation": {
      "required": [
        "jobId"
      ],
      "type": "object",
      "properties": {
        "jobId": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "status": {
          "$ref": "#/definitions/StatusModel"
        },
        "source": {
          "type": "string"
        },
        "userFavourite": {
          "type": "boolean"
        },
        "jobDescription": {
          "type": "string"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "workplaceAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "category": {
          "$ref": "#/definitions/JobOrderCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/JobOrderLocationModel"
        },
        "start": {
          "$ref": "#/definitions/JobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workType": {
          "$ref": "#/definitions/WorkTypeModel"
        },
        "salary": {
          "$ref": "#/definitions/JobOrderSalaryRangeModel"
        },
        "fee": {
          "$ref": "#/definitions/JobOrderFeeModel"
        },
        "skillTags": {
          "$ref": "#/definitions/JobOrderSkillTags"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "closedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "closedAt": {
          "format": "date-time",
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/JobOrderStatisticsSummaryModel"
        },
        "links": {
          "$ref": "#/definitions/JobOrderLinks"
        }
      }
    },
    "JobOrderCategoryModel": {
      "required": [
        "categoryId",
        "name"
      ],
      "type": "object",
      "properties": {
        "categoryId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "subCategory": {
          "$ref": "#/definitions/JobOrderSubCategoryModel"
        }
      }
    },
    "JobOrderLocationModel": {
      "required": [
        "locationId",
        "name"
      ],
      "type": "object",
      "properties": {
        "locationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "area": {
          "$ref": "#/definitions/JobOrderLocationAreaModel"
        }
      }
    },
    "JobOrderStartModel": {
      "type": "object",
      "properties": {
        "immediate": {
          "type": "boolean"
        },
        "relative": {
          "$ref": "#/definitions/RelativeStartModel",
          "description": "The amount of notice time the candidate must give to end their current employment\r\nAllowed values are 1-4 weeks, 1-6 months"
        },
        "date": {
          "format": "date",
          "description": "The specific date that a job starts or a candidate is available",
          "type": "string"
        }
      }
    },
    "JobOrderSalaryRangeModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month",
            "Year"
          ],
          "type": "string"
        },
        "rateLow": {
          "format": "double",
          "type": "number"
        },
        "rateHigh": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "description": "Optional ISO 4217 3-letter alphabetic currency code",
          "type": "string"
        },
        "timePerWeek": {
          "format": "double",
          "description": "Number of days per week for a daily rate or hours per week for an hourly rate.",
          "type": "number"
        }
      }
    },
    "JobOrderFeeModel": {
      "type": "object",
      "properties": {
        "rateType": {
          "enum": [
            "Percent",
            "Fixed",
            "Margin"
          ],
          "type": "string"
        },
        "rate": {
          "format": "double",
          "type": "number"
        },
        "estimatedTotal": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "JobOrderSkillTags": {
      "type": "object",
      "properties": {
        "matchAll": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JobOrderStatisticsSummaryModel": {
      "type": "object",
      "properties": {
        "applications": {
          "$ref": "#/definitions/JobOrderJobApplicationStatisticsSummaryModel"
        }
      }
    },
    "JobOrderLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        },
        "applications": {
          "type": "string"
        }
      }
    },
    "JobOrderSubCategoryModel": {
      "required": [
        "subCategoryId",
        "name"
      ],
      "type": "object",
      "properties": {
        "subCategoryId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JobOrderLocationAreaModel": {
      "required": [
        "areaId",
        "name"
      ],
      "type": "object",
      "properties": {
        "areaId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JobOrderJobApplicationStatisticsSummaryModel": {
      "type": "object",
      "properties": {
        "new": {
          "format": "int32",
          "type": "integer"
        },
        "active": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdateJobOrderCommand": {
      "type": "object",
      "properties": {
        "jobTitle": {
          "maxLength": 100,
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "contactId": {
          "format": "int32",
          "type": "integer"
        },
        "jobDescription": {
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Job status",
          "type": "integer"
        },
        "userFavourite": {
          "description": "Job is a favourite for the current user",
          "type": "boolean"
        },
        "category": {
          "$ref": "#/definitions/SubmitCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/SubmitLocationModel"
        },
        "workplaceAddressId": {
          "format": "uuid",
          "description": "Workplace Address Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "start": {
          "$ref": "#/definitions/SubmitJobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitJobOrderSalaryRangeModel"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "maxLength": 50,
          "type": "string"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "skillTags": {
          "$ref": "#/definitions/SubmitJobOrderSkillTagsModel"
        },
        "ownerUserId": {
          "format": "int32",
          "description": "User Id - Owner of this job",
          "type": "integer"
        },
        "recruiterUserId": {
          "description": "User Id - Optional list of recruiters assigned to the job",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "JobOrderAttachmentListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderAttachmentModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "JobOrderAttachmentModel": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "JobDescription"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdateJobOrderAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "JobDescription"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "JobOrderAttachmentCategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderAttachmentCategoryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "JobOrderAttachmentCategoryModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "JobDescription"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "AddJobOrderCandidateCommand": {
      "required": [
        "candidateId"
      ],
      "type": "object",
      "properties": {
        "candidateId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "source": {
          "type": "string"
        }
      }
    },
    "AddJobOrderNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "applicationId": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "JobOrderSourceListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "SetJobOrderStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "LocationListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationModel"
          }
        }
      }
    },
    "LocationModel": {
      "required": [
        "locationId",
        "name"
      ],
      "type": "object",
      "properties": {
        "locationId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "areas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LocationAreaModel"
          }
        }
      }
    },
    "LocationAreaModel": {
      "required": [
        "areaId",
        "name"
      ],
      "type": "object",
      "properties": {
        "areaId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AddNoteCommand": {
      "required": [
        "type",
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "jobId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "requisitionId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "candidateId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "applicationId": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "placementId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "companyId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "contactId": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "NoteRepresentation": {
      "required": [
        "noteId"
      ],
      "type": "object",
      "properties": {
        "noteId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "readonly": {
          "type": "boolean"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NoteAttachmentModel"
          }
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderTitleModel"
          }
        },
        "requisitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionSummaryModel"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateNameModel"
          }
        },
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationSummaryModel"
          }
        },
        "placements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementSummaryModel"
          }
        },
        "companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyNameModel"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactNameModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/NoteLinks"
        }
      }
    },
    "NoteLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        }
      }
    },
    "UpdateNoteCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        }
      }
    },
    "PartnerActionListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "description": "Partner actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "PartnerActionModel": {
      "type": "object",
      "properties": {
        "actionId": {
          "format": "uuid",
          "description": "Unique identifier for the partner action",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "actionType": {
          "description": "Type of action",
          "enum": [
            "Job",
            "JobAd",
            "Candidate",
            "JobApplication",
            "Placement",
            "Company",
            "Contact"
          ],
          "type": "string"
        },
        "actionName": {
          "description": "Menu item label that will appear to the end-user",
          "type": "string"
        },
        "actionFilter": {
          "$ref": "#/definitions/PartnerActionFilterModel",
          "description": "Access restrictions/limits for the action"
        },
        "reference": {
          "description": "Unique partner defined reference/identifier for the action",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "urlType": {
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        },
        "webhookData": {
          "description": "Additional data that will be included with the webhook notificaiton",
          "type": "object"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Date the partner action was added",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedAt": {
          "format": "date-time",
          "description": "Date the partner action was last updated",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        }
      }
    },
    "PartnerActionFilterModel": {
      "type": "object",
      "properties": {
        "adminOnly": {
          "description": "Action is available to admin users only",
          "type": "boolean"
        },
        "approvedOnly": {
          "description": "Action is only available on approved entities (currently only supported for placements)",
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/PartnerActionStatusFilterModel",
          "description": "Action is available to entities with a specific status"
        }
      }
    },
    "PartnerActionStatusFilterModel": {
      "type": "object",
      "properties": {
        "activeOnly": {
          "description": "Action is available to entities with an active status",
          "type": "boolean"
        },
        "statusId": {
          "description": "Action is available to entities with a specific status",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "PartnerActionRepresentation": {
      "type": "object",
      "properties": {
        "actionId": {
          "format": "uuid",
          "description": "Unique identifier for the partner action",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "actionType": {
          "description": "Type of action",
          "enum": [
            "Job",
            "JobAd",
            "Candidate",
            "JobApplication",
            "Placement",
            "Company",
            "Contact"
          ],
          "type": "string"
        },
        "actionName": {
          "description": "Menu item label that will appear to the end-user",
          "type": "string"
        },
        "actionFilter": {
          "$ref": "#/definitions/PartnerActionFilterModel",
          "description": "Access restrictions/limits for the action"
        },
        "reference": {
          "description": "Unique partner defined reference/identifier for the action",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "urlType": {
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        },
        "webhookData": {
          "description": "Additional data that will be included with the webhook notificaiton",
          "type": "object"
        },
        "createdAt": {
          "format": "date-time",
          "description": "Date the partner action was added",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "updatedAt": {
          "format": "date-time",
          "description": "Date the partner action was last updated",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "AddPartnerActionCommand": {
      "required": [
        "actionName"
      ],
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Menu item label that will appear to the end-user",
          "maxLength": 100,
          "type": "string"
        },
        "reference": {
          "description": "Unique partner defined reference/identifier for the action",
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.\\\r\nTemplates parameters can be used in the URL to identify the resource submitted to the action\r\n<table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>",
          "maxLength": 500,
          "type": "string"
        },
        "urlType": {
          "description": "Present `url` as either an embedded popup (`\"Popup\"`, the default), or open a new window or tab (`\"Page\"`)",
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        },
        "actionFilter": {
          "$ref": "#/definitions/PartnerActionFilterModel",
          "description": "Limit access to this action"
        },
        "webhookData": {
          "description": "Additional data to include with the webhook notification",
          "type": "object"
        }
      }
    },
    "UpdatePartnerActionCommand": {
      "type": "object",
      "properties": {
        "actionName": {
          "description": "Menu item label that will appear to the end-user",
          "maxLength": 100,
          "type": "string"
        },
        "reference": {
          "description": "Unique partner defined reference/identifier for the action",
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "description": "URL to open after the action is selected and assigned the `\"Submitted\"` stage.\\\r\nTemplates parameters can be used in the URL to identify the resource submitted to the action\r\n<table><tr><td>`{userId}`</td><td>Replaced with the User Id of the user performing the action</td></tr><tr><td>`{jobId}`</td><td>Replaced with the Job Id</td></tr><tr><td>`{adId}`</td><td>Replaced with the Job Ad Id</td></tr><tr><td>`{candidateId}`</td><td>Replaced with the Candidate Id</td></tr><tr><td>`{applicationId}`</td><td>Replaced with the Job Application Id</td></tr><tr><td>`{placementId}`</td><td>Replaced with the Placement Id</td></tr><tr><td>`{companyId}`</td><td>Replaced with the Company Id</td></tr><tr><td>`{contactId}`</td><td>Replaced with the Contact Id</td></tr></table>",
          "maxLength": 500,
          "type": "string"
        },
        "urlType": {
          "description": "Present `url` as either an embedded popup (`\"Popup\"`, the default), or open a new window or tab (`\"Page\"`)",
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        },
        "actionFilter": {
          "$ref": "#/definitions/PartnerActionFilterModel",
          "description": "Limit access to this action"
        },
        "webhookData": {
          "description": "Additional data to include with the webhook notification",
          "type": "object"
        }
      }
    },
    "UpdateCandidatePartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "PartnerActionResultCommandModel": {
      "description": "Optional complete or partial results for a partner action",
      "type": "object",
      "properties": {
        "score": {
          "format": "int32",
          "description": "Optional partner score for the action result",
          "maximum": 100,
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "description": "Optional partner defined URL for the action result",
          "type": "string"
        },
        "urlType": {
          "description": "Present `url` as either an embedded popup (`\"Popup\"`, the default), or open a new window or tab (`\"Page\"`)",
          "enum": [
            "Popup",
            "Page"
          ],
          "type": "string"
        }
      }
    },
    "UpdateCompanyPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "UpdateContactPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "UpdateJobAdPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "UpdateJobApplicationPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "UpdateJobOrderPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "UpdatePlacementPartnerActionCommand": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Optional partner defined action status/progress",
          "maxLength": 100,
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/PartnerActionResultCommandModel"
        }
      }
    },
    "PlacementRepresentation": {
      "required": [
        "placementId",
        "type"
      ],
      "type": "object",
      "properties": {
        "placementId": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "job": {
          "$ref": "#/definitions/JobOrderTitleModel"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateNameModel"
        },
        "approved": {
          "type": "boolean"
        },
        "approvedAt": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "enum": [
            "Permanent",
            "Contract",
            "Temporary",
            "Credit"
          ],
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Status of the placement"
        },
        "startDate": {
          "format": "date",
          "description": "Date employment begins",
          "type": "string"
        },
        "endDate": {
          "format": "date",
          "description": "Date a contract or temporary employment ends",
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "source": {
          "$ref": "#/definitions/PlacementSourceModel",
          "description": "The source of the placement"
        },
        "workplaceAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "paymentType": {
          "type": "string"
        },
        "salary": {
          "$ref": "#/definitions/PlacementSalaryModel",
          "description": "Salary details for permanent and fixed rates"
        },
        "contractRate": {
          "$ref": "#/definitions/PlacementContractRateModel"
        },
        "award": {
          "type": "string"
        },
        "industryCode": {
          "type": "string"
        },
        "feeSplit": {
          "enum": [
            "Fixed",
            "Percent"
          ],
          "type": "string"
        },
        "billing": {
          "$ref": "#/definitions/PlacementBillingModel"
        },
        "export": {
          "$ref": "#/definitions/PlacementExportModel",
          "description": "Placement should be exported to payroll, timesheets or onboarding"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "links": {
          "$ref": "#/definitions/PlacementLinks"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementRecruiterModel"
          }
        },
        "partnerActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PartnerActionStageModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "PlacementSourceModel": {
      "type": "object",
      "properties": {
        "placement": {
          "description": "The source of candidate that lead to this placement",
          "type": "string"
        },
        "candidate": {
          "description": "The original source of the candidate",
          "type": "string"
        }
      }
    },
    "PlacementSalaryModel": {
      "type": "object",
      "properties": {
        "base": {
          "format": "double",
          "type": "number"
        },
        "superannuation": {
          "format": "double",
          "type": "number"
        },
        "benefits": {
          "format": "double",
          "type": "number"
        },
        "total": {
          "format": "double",
          "type": "number"
        },
        "fee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PlacementContractRateModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day",
            "Week",
            "Month"
          ],
          "type": "string"
        },
        "hoursPerWeek": {
          "format": "double",
          "type": "number"
        },
        "daysPerWeek": {
          "format": "double",
          "type": "number"
        },
        "clientRate": {
          "format": "double",
          "type": "number"
        },
        "candidateRate": {
          "format": "double",
          "type": "number"
        },
        "onCostsType": {
          "enum": [
            "Fixed",
            "Percent"
          ],
          "type": "string"
        },
        "onCosts": {
          "format": "double",
          "type": "number"
        },
        "netMargin": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "PlacementBillingModel": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "address": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "email": {
          "type": "string"
        },
        "orderRef": {
          "description": "PO Number/Reference",
          "type": "string"
        },
        "invoiceRef": {
          "description": "Invoice Number/Reference",
          "type": "string"
        },
        "terms": {
          "description": "Billing payment terms",
          "type": "string"
        },
        "dueDate": {
          "format": "date",
          "description": "Payment due date",
          "type": "string"
        }
      }
    },
    "PlacementExportModel": {
      "type": "object",
      "properties": {
        "payroll": {
          "description": "Placement has been selected for export to a payroll service",
          "type": "boolean"
        },
        "timesheets": {
          "description": "Placement has been selected for export to a timesheet service",
          "type": "boolean"
        },
        "approvers": {
          "description": "Timesheet/payroll approver contacts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementApproverModel"
          }
        },
        "onboarding": {
          "description": "Placement has been selected for export to an onboarding service",
          "type": "boolean"
        },
        "onboardingManagers": {
          "description": "Onboarding manager contacts",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementApproverModel"
          }
        }
      }
    },
    "PlacementLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "extendsPlacement": {
          "type": "string"
        },
        "extendedByPlacement": {
          "type": "string"
        },
        "creditsPlacement": {
          "type": "string"
        },
        "creditedByPlacement": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "attachments": {
          "type": "string"
        }
      }
    },
    "PlacementRecruiterModel": {
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "feeSplit": {
          "format": "double",
          "type": "number"
        },
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "PlacementApproverModel": {
      "required": [
        "contactId"
      ],
      "type": "object",
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "contactId": {
          "format": "int32",
          "description": "Unique identifier for the contact",
          "type": "integer"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "salutation": {
          "description": "Salutation/honorific/title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/StatusModel",
          "description": "Contact status"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Contact owner"
        }
      }
    },
    "UpdatePlacementCommand": {
      "type": "object",
      "properties": {
        "jobTitle": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "contactId": {
          "format": "int32",
          "type": "integer"
        },
        "summary": {
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Placement status",
          "type": "integer"
        },
        "paymentType": {
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "description": "Date employment begins",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "endDate": {
          "format": "date",
          "description": "Date a contract or temporary employment ends",
          "type": "string"
        },
        "salary": {
          "$ref": "#/definitions/SubmitPlacementSalaryModel",
          "description": "Salary details for permanent and fixed rate placements, only one of salary or contractRate can be specified.<br />\r\nsalary can be specified for all placement types and implies a \"FixedFee\" rate type if specified for Contract and Temporary type placements."
        },
        "contractRate": {
          "$ref": "#/definitions/SubmitPlacementContractRateModel",
          "description": "Contract rate details for contract and temporary placements, only one of contractRate or salary can be specified.<br />\r\ncontractRate can only be specified for Contract and Temporary placement types."
        },
        "award": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "industryCode": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "billing": {
          "$ref": "#/definitions/SubmitPlacementBillingModel"
        },
        "feeSplit": {
          "enum": [
            "Fixed",
            "Percent"
          ],
          "type": "string"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitPlacementRecruiterModel"
          }
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        }
      }
    },
    "SubmitPlacementSalaryModel": {
      "type": "object",
      "properties": {
        "base": {
          "format": "double",
          "type": "number"
        },
        "superannuation": {
          "format": "double",
          "type": "number"
        },
        "total": {
          "format": "double",
          "type": "number"
        },
        "fee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "SubmitPlacementContractRateModel": {
      "type": "object",
      "properties": {
        "ratePer": {
          "enum": [
            "Hour",
            "Day"
          ],
          "type": "string"
        },
        "hoursPerWeek": {
          "format": "double",
          "type": "number"
        },
        "daysPerWeek": {
          "format": "double",
          "type": "number"
        },
        "clientRate": {
          "format": "double",
          "type": "number"
        },
        "candidateRate": {
          "format": "double",
          "type": "number"
        },
        "onCostsType": {
          "enum": [
            "Fixed",
            "Percent"
          ],
          "type": "string"
        },
        "onCosts": {
          "format": "double",
          "type": "number"
        },
        "netMargin": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "SubmitPlacementBillingModel": {
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "type": "integer"
        },
        "addressId": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "email": {
          "maxLength": 200,
          "minLength": 0,
          "type": "string"
        },
        "orderRef": {
          "description": "PO Number/Reference",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "invoiceRef": {
          "description": "Invoice Number/Reference",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "terms": {
          "description": "Billing payment terms",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "dueDate": {
          "format": "date",
          "description": "Payment due date",
          "type": "string"
        }
      }
    },
    "SubmitPlacementRecruiterModel": {
      "type": "object",
      "properties": {
        "userId": {
          "format": "int32",
          "description": "Recruiter to be associated with the placement, must also be associated with the related job.",
          "type": "integer"
        },
        "feeSplit": {
          "format": "double",
          "description": "Optional fee portion, 0.0-1.0 (representing 0%-100%) if placement feeSplit='Percent', a currency amount if placement feeSplit='Fixed'",
          "type": "number"
        }
      }
    },
    "PlacementAttachmentListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementAttachmentModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "PlacementAttachmentModel": {
      "type": "object",
      "properties": {
        "attachmentId": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "enum": [
            "Other",
            "Resume",
            "FormattedResume",
            "CoverLetter",
            "Screening",
            "Check",
            "Reference",
            "License",
            "Terms",
            "CompanyTerms",
            "StandardTerms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UpdatePlacementAttachmentCommand": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Attachment type",
          "enum": [
            "Other",
            "Resume",
            "FormattedResume",
            "CoverLetter",
            "Screening",
            "Check",
            "Reference",
            "License",
            "Terms",
            "CompanyTerms",
            "StandardTerms"
          ],
          "type": "string"
        },
        "category": {
          "description": "Optional additional categorisation for the attachment type",
          "type": "string"
        },
        "expiry": {
          "format": "date",
          "description": "Optional expiry date as listed on the document, e.g. a license expiry date",
          "type": "string"
        }
      }
    },
    "PlacementAttachmentCategoryListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementAttachmentCategoryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/ModelLinks",
          "readOnly": true
        }
      }
    },
    "PlacementAttachmentCategoryModel": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "Other",
            "Resume",
            "FormattedResume",
            "CoverLetter",
            "Screening",
            "Check",
            "Reference",
            "License",
            "Terms",
            "CompanyTerms",
            "StandardTerms"
          ],
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "PlacementAwardListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "PlacementBillingTermsListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "PlacementIndustryCodeListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "AddPlacementNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "PlacementPaymentTypeListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameModel"
          }
        }
      }
    },
    "SetPlacementStatusCommand": {
      "required": [
        "statusId"
      ],
      "type": "object",
      "properties": {
        "statusId": {
          "format": "int32",
          "description": "Status Id",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/SetStatusNoteModel",
          "description": "Optional note"
        }
      }
    },
    "PlacementTimesheetListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementTimesheetModel"
          }
        }
      }
    },
    "PlacementTimesheetModel": {
      "type": "object",
      "properties": {
        "period": {
          "$ref": "#/definitions/DateRangeModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "submittedAt": {
          "format": "date-time",
          "type": "string"
        },
        "approvedAt": {
          "format": "date-time",
          "type": "string"
        },
        "approvedBy": {
          "$ref": "#/definitions/PlacementTimesheetApproverModel"
        },
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementTimesheetEntryModel"
          }
        }
      }
    },
    "DateRangeModel": {
      "required": [
        "start",
        "end"
      ],
      "type": "object",
      "properties": {
        "start": {
          "format": "date",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "end": {
          "format": "date",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        }
      }
    },
    "PlacementTimesheetApproverModel": {
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "position": {
          "description": "Position or job title",
          "type": "string"
        },
        "email": {
          "description": "Primary email address",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile/cell number",
          "type": "string"
        }
      }
    },
    "PlacementTimesheetEntryModel": {
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "date": {
          "format": "date",
          "type": "string",
          "properties": {
            "timeOfDay": {
              "format": "time"
            }
          }
        },
        "type": {
          "enum": [
            "Time",
            "Hours",
            "Days"
          ],
          "type": "string"
        }
      },
      "x-extendedDiscriminator": "type"
    },
    "PlacementTimesheetTimeModel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlacementTimesheetEntryModel"
        },
        {
          "type": "object",
          "properties": {
            "date": {
              "format": "date",
              "type": "string",
              "properties": {
                "timeOfDay": {
                  "format": "time"
                }
              }
            },
            "type": {
              "enum": [
                "Time"
              ],
              "type": "object"
            },
            "start": {
              "format": "time",
              "type": "string",
              "properties": {
                "value": {
                  "format": "time"
                }
              }
            },
            "end": {
              "format": "time",
              "type": "string",
              "properties": {
                "value": {
                  "format": "time"
                }
              }
            },
            "break": {
              "format": "time",
              "type": "string",
              "properties": {
                "value": {
                  "format": "time"
                }
              }
            }
          }
        }
      ],
      "properties": {}
    },
    "PlacementTimesheetHoursModel": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PlacementTimesheetEntryModel"
        },
        {
          "type": "object",
          "properties": {
            "date": {
              "format": "date",
              "type": "string",
              "properties": {
                "timeOfDay": {
                  "format": "time"
                }
              }
            },
            "type": {
              "enum": [
                "Hours"
              ],
              "type": "object"
            },
            "hours": {
              "format": "double",
              "type": "number"
            }
          }
        }
      ],
      "properties": {}
    },
    "AddRequisitionCommand": {
      "required": [
        "contactId",
        "jobTitle"
      ],
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Hiring manager (contact) submitting the requisition.",
          "type": "integer"
        },
        "jobTitle": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/SubmitCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/SubmitLocationModel"
        },
        "workplaceAddressId": {
          "format": "uuid",
          "description": "Workplace address Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "start": {
          "$ref": "#/definitions/SubmitJobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitJobOrderSalaryRangeModel"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "workflowId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "description": "User Id - Optional list of recruiters assigned to the requisition.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "RequisitionRepresentation": {
      "required": [
        "requisitionId",
        "jobTitle"
      ],
      "type": "object",
      "properties": {
        "requisitionId": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "enum": [
            "Draft",
            "Submitted",
            "Rejected",
            "Approved"
          ],
          "type": "string"
        },
        "workflowStageIndex": {
          "format": "int32",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "hiringManager": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "workflow": {
          "$ref": "#/definitions/CompanyWorkflowModel"
        },
        "jobDescription": {
          "type": "string"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "description": "Source of the requisition, or reason the requisition is being raised.",
          "type": "string"
        },
        "workplaceAddress": {
          "$ref": "#/definitions/CompanyAddressModel"
        },
        "category": {
          "$ref": "#/definitions/JobOrderCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/JobOrderLocationModel"
        },
        "start": {
          "$ref": "#/definitions/JobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workType": {
          "$ref": "#/definitions/WorkTypeModel"
        },
        "salary": {
          "$ref": "#/definitions/JobOrderSalaryRangeModel"
        },
        "timePerWeek": {
          "format": "double",
          "description": "Number of days per week for a daily rate or hours per week for an hourly rate.",
          "type": "number"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "name": "Text Field 1",
              "type": "Text",
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "name": "List Field 2",
              "type": "List",
              "value": [
                "Value 1",
                "Value 2"
              ]
            },
            {
              "fieldId": 3,
              "name": "Date Field 3",
              "type": "Date",
              "value": "2018-07-01"
            }
          ]
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "recruiters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "links": {
          "$ref": "#/definitions/RequisitionLinks"
        }
      }
    },
    "CompanyWorkflowModel": {
      "required": [
        "workflowId",
        "name"
      ],
      "type": "object",
      "properties": {
        "workflowId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "approvers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyWorkflowApproverModel"
          }
        }
      }
    },
    "RequisitionLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "workflow": {
          "type": "string"
        },
        "job": {
          "type": "string"
        },
        "history": {
          "type": "string"
        }
      }
    },
    "UpdateRequisitionCommand": {
      "type": "object",
      "properties": {
        "contactId": {
          "format": "int32",
          "description": "Optional contact associated with the change, must be associated with the same company as the requisition.",
          "type": "integer"
        },
        "jobTitle": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/SubmitCategoryModel"
        },
        "location": {
          "$ref": "#/definitions/SubmitLocationModel"
        },
        "workplaceAddressId": {
          "format": "uuid",
          "description": "Workplace address Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "start": {
          "$ref": "#/definitions/SubmitJobOrderStartModel"
        },
        "duration": {
          "$ref": "#/definitions/DurationModel"
        },
        "workTypeId": {
          "format": "int32",
          "type": "integer"
        },
        "salary": {
          "$ref": "#/definitions/SubmitJobOrderSalaryRangeModel"
        },
        "numberOfJobs": {
          "format": "int32",
          "type": "integer"
        },
        "source": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "custom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitCustomFieldValueModel"
          },
          "example": [
            {
              "fieldId": 1,
              "value": "Text value"
            },
            {
              "fieldId": 2,
              "value": [
                "List value 1",
                "List value 2"
              ]
            },
            {
              "fieldId": 3,
              "value": "2018-07-01"
            }
          ]
        },
        "workflowId": {
          "format": "int32",
          "type": "integer"
        },
        "recruiterUserId": {
          "description": "User Id - Optional list of recruiters assigned to the requisition.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "SubmitRequisitionCommand": {
      "type": "object",
      "properties": {}
    },
    "ApproveRequisitionCommand": {
      "required": [
        "approverId"
      ],
      "type": "object",
      "properties": {
        "approverId": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RejectRequisitionCommand": {
      "required": [
        "approverId"
      ],
      "type": "object",
      "properties": {
        "approverId": {
          "format": "int32",
          "type": "integer"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "RequisitionHistoryModel": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionLogModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "RequisitionLogModel": {
      "type": "object",
      "properties": {
        "contact": {
          "$ref": "#/definitions/ContactNameModel"
        },
        "oldStatus": {
          "enum": [
            "Draft",
            "Submitted",
            "Rejected",
            "Approved"
          ],
          "type": "string"
        },
        "newStatus": {
          "enum": [
            "Draft",
            "Submitted",
            "Rejected",
            "Approved"
          ],
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string",
          "properties": {
            "offset": {
              "format": "time"
            },
            "timeOfDay": {
              "format": "time"
            }
          }
        }
      }
    },
    "AddRequisitionNoteCommand": {
      "required": [
        "text"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Note type",
          "type": "string"
        },
        "text": {
          "description": "Note content",
          "type": "string"
        },
        "reference": {
          "description": "Reference string used to identify a note or group of notes",
          "type": "string"
        }
      }
    },
    "SubmissionRepresentation": {
      "required": [
        "submissionId"
      ],
      "type": "object",
      "properties": {
        "submissionId": {
          "format": "int64",
          "type": "integer"
        },
        "jobTitle": {
          "type": "string"
        },
        "candidate": {
          "$ref": "#/definitions/CandidateSummaryModel"
        },
        "company": {
          "$ref": "#/definitions/CompanyNameModel"
        },
        "job": {
          "$ref": "#/definitions/JobOrderSummaryModel"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "candidateSummary": {
          "type": "string"
        },
        "jobApplication": {
          "$ref": "#/definitions/JobApplicationSummaryModel"
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactNameModel"
          }
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel"
        },
        "links": {
          "$ref": "#/definitions/SubmissionLinks"
        }
      }
    },
    "SubmissionLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        }
      }
    },
    "UserListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "UserSummaryModel": {
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "office": {
          "$ref": "#/definitions/UserOfficeSummaryModel"
        }
      }
    },
    "UserOfficeSummaryModel": {
      "required": [
        "officeId",
        "name"
      ],
      "type": "object",
      "properties": {
        "officeId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "UserRepresentation": {
      "required": [
        "userId"
      ],
      "type": "object",
      "properties": {
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "office": {
          "$ref": "#/definitions/UserOfficeSummaryModel"
        },
        "timeZone": {
          "type": "string"
        },
        "culture": {
          "type": "string"
        },
        "admin": {
          "type": "boolean"
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupSummaryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/UserLinks"
        }
      }
    },
    "UserGroupSummaryModel": {
      "required": [
        "groupId",
        "name"
      ],
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UserLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "office": {
          "type": "string"
        },
        "userGroups": {
          "type": "string"
        }
      }
    },
    "UserGroupListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "UserGroupRepresentation": {
      "required": [
        "groupId",
        "name"
      ],
      "type": "object",
      "properties": {
        "groupId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "description": "Users belonging to the group",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSummaryModel"
          }
        },
        "links": {
          "$ref": "#/definitions/UserGroupLinks"
        }
      }
    },
    "UserGroupLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "users": {
          "type": "string"
        }
      }
    },
    "UserOfficeListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserOfficeNameModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "UserOfficeNameModel": {
      "required": [
        "officeId",
        "name"
      ],
      "type": "object",
      "properties": {
        "officeId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UserOfficeRepresentation": {
      "required": [
        "officeId",
        "name"
      ],
      "type": "object",
      "properties": {
        "officeId": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "users": {
          "description": "Users belonging to the office",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserNameModel"
          }
        },
        "links": {
          "$ref": "#/definitions/UserOfficeLinks"
        }
      }
    },
    "UserOfficeLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "users": {
          "type": "string"
        }
      }
    },
    "UserTaskListRepresentation": {
      "required": [
        "totalCount"
      ],
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserTaskSummaryModel"
          }
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/PageLinks"
        }
      }
    },
    "UserTaskSummaryModel": {
      "type": "object",
      "properties": {
        "taskId": {
          "format": "int64",
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "startAt": {
          "format": "date-time",
          "type": "string"
        },
        "endAt": {
          "format": "date-time",
          "type": "string"
        },
        "allDay": {
          "type": "boolean"
        },
        "reminderMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "complete": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Owner of the task"
        },
        "assignedTo": {
          "$ref": "#/definitions/UserNameModel",
          "description": "User the task is assigned to if not the owner"
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "UserTaskRepresentation": {
      "type": "object",
      "properties": {
        "taskId": {
          "format": "int64",
          "type": "integer"
        },
        "text": {
          "type": "string"
        },
        "startAt": {
          "format": "date-time",
          "type": "string"
        },
        "endAt": {
          "format": "date-time",
          "type": "string"
        },
        "allDay": {
          "type": "boolean"
        },
        "reminderMinutes": {
          "format": "int32",
          "type": "integer"
        },
        "complete": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/UserNameModel",
          "description": "Owner of the task"
        },
        "assignedTo": {
          "$ref": "#/definitions/UserNameModel",
          "description": "User the task is assigned to if not the owner"
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobOrderTitleModel"
          }
        },
        "requisitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequisitionSummaryModel"
          }
        },
        "candidates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandidateNameModel"
          }
        },
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobApplicationSummaryModel"
          }
        },
        "placements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlacementSummaryModel"
          }
        },
        "companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyNameModel"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactNameModel"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "createdAt": {
          "format": "date-time",
          "type": "string"
        },
        "updatedBy": {
          "$ref": "#/definitions/UserNameModel"
        },
        "updatedAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "$ref": "#/definitions/UserTaskLinks"
        }
      }
    },
    "UserTaskLinks": {
      "type": "object",
      "properties": {
        "self": {
          "type": "string"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "WorkTypeListRepresentation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkTypeModel"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "jobadder_identity": {
      "type": "oauth2",
      "description": "OAuth2 Authorization Code Flow",
      "flow": "accessCode",
      "authorizationUrl": "https://id.jobadder.com/connect/authorize",
      "tokenUrl": "https://id.jobadder.com/connect/token",
      "scopes": {
        "read": "View JobAdder data",
        "read_company": "View companies",
        "write": "Manage JobAdder data",
        "write_company": "Manage companies",
        "read_candidate": "View candidates",
        "read_placement": "View placements",
        "write_placement": "Manage placements",
        "read_float": "View floats",
        "read_contact": "View contacts",
        "write_contact": "Manage contacts",
        "read_requisition": "View requisitions",
        "read_jobapplication": "View job applications",
        "write_jobapplication": "Manage job applications",
        "write_candidate": "Manage candidates",
        "read_user": "View users",
        "read_usertask": "View user tasks",
        "read_submission": "View submissions",
        "read_jobad": "View job ads",
        "partner_jobboard": "View active job ads and submit job applications",
        "read_note": "View notes",
        "read_job_note": "View job notes",
        "read_candidate_note": "View candidate notes",
        "read_job": "View jobs",
        "write_job": "Manage jobs",
        "read_contact_note": "View contact notes",
        "write_note": "Manage notes",
        "write_contact_note": "Manage contact notes",
        "write_requisition": "Manage requisitions",
        "write_jobad": "Manage job ads",
        "read_requisition_note": "View requisition notes",
        "write_requisition_note": "Manage requisition notes",
        "read_placement_note": "View placement notes",
        "write_candidate_note": "Manage candidate notes",
        "read_usergroup": "View user groups",
        "write_placement_note": "Manage placement notes",
        "write_job_note": "Manage job notes",
        "read_company_note": "View company notes",
        "write_company_note": "Manage company notes",
        "partner_ui_action": "Add partner actions to JobAdder",
        "read_jobapplication_note": "View job application notes",
        "write_jobapplication_note": "Manage job application notes"
      }
    }
  },
  "tags": [
    {
      "name": "Candidate API:Candidates",
      "x-displayName": "Candidates"
    },
    {
      "name": "Candidate API:Photo",
      "x-displayName": "Photo"
    },
    {
      "name": "Candidate API:Availability",
      "x-displayName": "Availability"
    },
    {
      "name": "Candidate API:Videos",
      "x-displayName": "Videos"
    },
    {
      "name": "Candidate API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Candidate API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Candidate API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Candidate API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Candidate API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Candidate API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Candidate API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Candidate API:Privacy",
      "x-displayName": "Privacy"
    },
    {
      "name": "Candidate API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Candidate Float API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Candidate Submission API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Category API:Categories",
      "x-displayName": "Categories"
    },
    {
      "name": "Company API:Companies",
      "x-displayName": "Companies"
    },
    {
      "name": "Company API:Logo",
      "x-displayName": "Logo"
    },
    {
      "name": "Company API:Addresses",
      "x-displayName": "Addresses"
    },
    {
      "name": "Company API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Company API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Company API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Company API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Company API:Requisitions",
      "x-displayName": "Requisitions"
    },
    {
      "name": "Company API:Floats",
      "x-displayName": "Floats"
    },
    {
      "name": "Company API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Company API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Company API:Workflows",
      "x-displayName": "Workflows"
    },
    {
      "name": "Company API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Company API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Contact API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Contact API:Skills",
      "x-displayName": "Skills"
    },
    {
      "name": "Contact API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Contact API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Contact API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Contact API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Job Ad API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Job API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Job API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Job API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Job API:Submissions",
      "x-displayName": "Submissions"
    },
    {
      "name": "Job API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Job API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Job API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Job Application API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Job Application API:Videos",
      "x-displayName": "Videos"
    },
    {
      "name": "Job Application API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Job Application API:Review",
      "x-displayName": "Review"
    },
    {
      "name": "Job Application API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Job Application API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Job Board API:Job Boards",
      "x-displayName": "Job Boards"
    },
    {
      "name": "Job Board API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Job Board API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Location API:Countries",
      "x-displayName": "Countries"
    },
    {
      "name": "Location API:Locations",
      "x-displayName": "Locations"
    },
    {
      "name": "Note API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Note API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Partner Action API:Actions",
      "x-displayName": "Actions"
    },
    {
      "name": "Partner Action API:Candidates",
      "x-displayName": "Candidates"
    },
    {
      "name": "Partner Action API:Companies",
      "x-displayName": "Companies"
    },
    {
      "name": "Partner Action API:Contacts",
      "x-displayName": "Contacts"
    },
    {
      "name": "Partner Action API:Job Ads",
      "x-displayName": "Job Ads"
    },
    {
      "name": "Partner Action API:Job Applications",
      "x-displayName": "Job Applications"
    },
    {
      "name": "Partner Action API:Jobs",
      "x-displayName": "Jobs"
    },
    {
      "name": "Partner Action API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Placement API:Placements",
      "x-displayName": "Placements"
    },
    {
      "name": "Placement API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Placement API:Timesheets",
      "x-displayName": "Timesheets"
    },
    {
      "name": "Placement API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Placement API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "Requisition API:Requisitions",
      "x-displayName": "Requisitions"
    },
    {
      "name": "Requisition API:Attachments",
      "x-displayName": "Attachments"
    },
    {
      "name": "Requisition API:Approval",
      "x-displayName": "Approval"
    },
    {
      "name": "Requisition API:Notes",
      "x-displayName": "Notes"
    },
    {
      "name": "Requisition API:Lists",
      "x-displayName": "Lists"
    },
    {
      "name": "User API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User API:Tasks",
      "x-displayName": "Tasks"
    },
    {
      "name": "User API:Groups",
      "x-displayName": "Groups"
    },
    {
      "name": "User Group API:Groups",
      "x-displayName": "Groups"
    },
    {
      "name": "User Group API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User Office API:Offices",
      "x-displayName": "Offices"
    },
    {
      "name": "User Office API:Users",
      "x-displayName": "Users"
    },
    {
      "name": "User Task API:Tasks",
      "x-displayName": "Tasks"
    },
    {
      "name": "Work Type API:Work Types",
      "x-displayName": "Work Types"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Job Board API",
      "tags": [
        "Job Board API:Job Boards",
        "Job Board API:Job Ads",
        "Job Board API:Job Applications"
      ]
    },
    {
      "name": "Job API",
      "tags": [
        "Job API:Jobs",
        "Job API:Job Applications",
        "Job API:Attachments",
        "Job API:Submissions",
        "Job API:Placements",
        "Job API:Notes",
        "Job API:Lists"
      ]
    },
    {
      "name": "Requisition API",
      "tags": [
        "Requisition API:Requisitions",
        "Requisition API:Attachments",
        "Requisition API:Approval",
        "Requisition API:Notes",
        "Requisition API:Lists"
      ]
    },
    {
      "name": "Job Ad API",
      "tags": [
        "Job Ad API:Job Ads"
      ]
    },
    {
      "name": "Candidate API",
      "tags": [
        "Candidate API:Candidates",
        "Candidate API:Photo",
        "Candidate API:Availability",
        "Candidate API:Videos",
        "Candidate API:Skills",
        "Candidate API:Attachments",
        "Candidate API:Floats",
        "Candidate API:Job Applications",
        "Candidate API:Submissions",
        "Candidate API:Placements",
        "Candidate API:Notes",
        "Candidate API:Privacy",
        "Candidate API:Lists"
      ]
    },
    {
      "name": "Candidate Float API",
      "tags": [
        "Candidate Float API:Floats"
      ]
    },
    {
      "name": "Candidate Submission API",
      "tags": [
        "Candidate Submission API:Submissions"
      ]
    },
    {
      "name": "Job Application API",
      "tags": [
        "Job Application API:Job Applications",
        "Job Application API:Videos",
        "Job Application API:Attachments",
        "Job Application API:Review",
        "Job Application API:Notes",
        "Job Application API:Lists"
      ]
    },
    {
      "name": "Placement API",
      "tags": [
        "Placement API:Placements",
        "Placement API:Attachments",
        "Placement API:Timesheets",
        "Placement API:Notes",
        "Placement API:Lists"
      ]
    },
    {
      "name": "Company API",
      "tags": [
        "Company API:Companies",
        "Company API:Logo",
        "Company API:Addresses",
        "Company API:Skills",
        "Company API:Contacts",
        "Company API:Attachments",
        "Company API:Jobs",
        "Company API:Requisitions",
        "Company API:Floats",
        "Company API:Submissions",
        "Company API:Placements",
        "Company API:Workflows",
        "Company API:Notes",
        "Company API:Lists"
      ]
    },
    {
      "name": "Contact API",
      "tags": [
        "Contact API:Contacts",
        "Contact API:Skills",
        "Contact API:Attachments",
        "Contact API:Notes",
        "Contact API:Jobs",
        "Contact API:Lists"
      ]
    },
    {
      "name": "Note API",
      "tags": [
        "Note API:Notes",
        "Note API:Attachments"
      ]
    },
    {
      "name": "User API",
      "tags": [
        "User API:Users",
        "User API:Tasks",
        "User API:Groups"
      ]
    },
    {
      "name": "User Task API",
      "tags": [
        "User Task API:Tasks"
      ]
    },
    {
      "name": "User Group API",
      "tags": [
        "User Group API:Groups",
        "User Group API:Users"
      ]
    },
    {
      "name": "User Office API",
      "tags": [
        "User Office API:Offices",
        "User Office API:Users"
      ]
    },
    {
      "name": "Category API",
      "tags": [
        "Category API:Categories"
      ]
    },
    {
      "name": "Location API",
      "tags": [
        "Location API:Countries",
        "Location API:Locations"
      ]
    },
    {
      "name": "Work Type API",
      "tags": [
        "Work Type API:Work Types"
      ]
    },
    {
      "name": "Partner Action API",
      "tags": [
        "Partner Action API:Actions",
        "Partner Action API:Candidates",
        "Partner Action API:Companies",
        "Partner Action API:Contacts",
        "Partner Action API:Job Ads",
        "Partner Action API:Job Applications",
        "Partner Action API:Jobs",
        "Partner Action API:Placements"
      ]
    }
  ]
}